// Code generated by goyacc n1ql.y. DO NOT EDIT.

//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2

import "fmt"
import "strings"
import "github.com/couchbase/clog"
import "github.com/couchbase/query/algebra"
import "github.com/couchbase/query/datastore"
import "github.com/couchbase/query/expression"
import "github.com/couchbase/query/expression/search"
import "github.com/couchbase/query/functions"
import "github.com/couchbase/query/functions/inline"
import "github.com/couchbase/query/functions/golang"
import "github.com/couchbase/query/functions/javascript"
import "github.com/couchbase/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:22
type yySymType struct {
	yys int
	s   string
	u32 uint32
	n   int64
	f   float64
	b   bool

	ss         []string
	expr       expression.Expression
	exprs      expression.Expressions
	subquery   *algebra.Subquery
	whenTerm   *expression.WhenTerm
	whenTerms  expression.WhenTerms
	binding    *expression.Binding
	bindings   expression.Bindings
	dimensions []expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect         *algebra.Select
	subresult          algebra.Subresult
	selectTerm         *algebra.SelectTerm
	subselect          *algebra.Subselect
	fromTerm           algebra.FromTerm
	simpleFromTerm     algebra.SimpleFromTerm
	keyspaceTerm       *algebra.KeyspaceTerm
	keyspacePath       *algebra.Path
	use                *algebra.Use
	joinHint           algebra.JoinHint
	indexRefs          algebra.IndexRefs
	indexRef           *algebra.IndexRef
	subqueryTerm       *algebra.SubqueryTerm
	path               expression.Path
	group              *algebra.Group
	resultTerm         *algebra.ResultTerm
	resultTerms        algebra.ResultTerms
	projection         *algebra.Projection
	order              *algebra.Order
	sortTerm           *algebra.SortTerm
	sortTerms          algebra.SortTerms
	indexKeyTerm       *algebra.IndexKeyTerm
	indexKeyTerms      algebra.IndexKeyTerms
	partitionTerm      *algebra.IndexPartitionTerm
	groupTerm          *algebra.GroupTerm
	groupTerms         algebra.GroupTerms
	windowTerm         *algebra.WindowTerm
	windowTerms        algebra.WindowTerms
	windowFrame        *algebra.WindowFrame
	windowFrameExtents algebra.WindowFrameExtents
	windowFrameExtent  *algebra.WindowFrameExtent

	updStatistics *algebra.UpdateStatistics

	keyspaceRef  *algebra.KeyspaceRef
	keyspaceRefs []*algebra.KeyspaceRef
	scopeRef     *algebra.ScopeRef

	pair         *algebra.Pair
	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	indexType     datastore.IndexType
	inferenceType datastore.InferenceType
	val           value.Value

	functionName functions.FunctionName
	functionBody functions.FunctionBody

	// token offset into the statement
	tokOffset int
}

const _ERROR_ = 57346
const ADVISE = 57347
const ALL = 57348
const ALTER = 57349
const ANALYZE = 57350
const AND = 57351
const ANY = 57352
const ARRAY = 57353
const AS = 57354
const ASC = 57355
const BEGIN = 57356
const BETWEEN = 57357
const BINARY = 57358
const BOOLEAN = 57359
const BREAK = 57360
const BUCKET = 57361
const BUILD = 57362
const BY = 57363
const CALL = 57364
const CASE = 57365
const CAST = 57366
const CLUSTER = 57367
const COLLATE = 57368
const COLLECTION = 57369
const COMMIT = 57370
const CONNECT = 57371
const CONTINUE = 57372
const CORRELATED = 57373
const COVER = 57374
const CREATE = 57375
const CURRENT = 57376
const DATABASE = 57377
const DATASET = 57378
const DATASTORE = 57379
const DECLARE = 57380
const DECREMENT = 57381
const DELETE = 57382
const DERIVED = 57383
const DESC = 57384
const DESCRIBE = 57385
const DISTINCT = 57386
const DO = 57387
const DROP = 57388
const EACH = 57389
const ELEMENT = 57390
const ELSE = 57391
const END = 57392
const EVERY = 57393
const EXCEPT = 57394
const EXCLUDE = 57395
const EXECUTE = 57396
const EXISTS = 57397
const EXPLAIN = 57398
const FALSE = 57399
const FETCH = 57400
const FILTER = 57401
const FIRST = 57402
const FLATTEN = 57403
const FLUSH = 57404
const FOLLOWING = 57405
const FOR = 57406
const FORCE = 57407
const FROM = 57408
const FTS = 57409
const FUNCTION = 57410
const GOLANG = 57411
const GRANT = 57412
const GROUP = 57413
const GROUPS = 57414
const GSI = 57415
const HASH = 57416
const HAVING = 57417
const IF = 57418
const IGNORE = 57419
const ILIKE = 57420
const IN = 57421
const INCLUDE = 57422
const INCREMENT = 57423
const INDEX = 57424
const INFER = 57425
const INLINE = 57426
const INNER = 57427
const INSERT = 57428
const INTERSECT = 57429
const INTO = 57430
const IS = 57431
const JAVASCRIPT = 57432
const JOIN = 57433
const KEY = 57434
const KEYS = 57435
const KEYSPACE = 57436
const KNOWN = 57437
const LANGUAGE = 57438
const LAST = 57439
const LEFT = 57440
const LET = 57441
const LETTING = 57442
const LIKE = 57443
const LIMIT = 57444
const LSM = 57445
const MAP = 57446
const MAPPING = 57447
const MATCHED = 57448
const MATERIALIZED = 57449
const MERGE = 57450
const MINUS = 57451
const MISSING = 57452
const NAMESPACE = 57453
const NAMESPACE_ID = 57454
const NEST = 57455
const NL = 57456
const NO = 57457
const NOT = 57458
const NOT_A_TOKEN = 57459
const NTH_VALUE = 57460
const NULL = 57461
const NULLS = 57462
const NUMBER = 57463
const OBJECT = 57464
const OFFSET = 57465
const ON = 57466
const OPTION = 57467
const OPTIONS = 57468
const OR = 57469
const ORDER = 57470
const OTHERS = 57471
const OUTER = 57472
const OVER = 57473
const PARSE = 57474
const PARTITION = 57475
const PASSWORD = 57476
const PATH = 57477
const POOL = 57478
const PRECEDING = 57479
const PREPARE = 57480
const PRIMARY = 57481
const PRIVATE = 57482
const PRIVILEGE = 57483
const PROBE = 57484
const PROCEDURE = 57485
const PUBLIC = 57486
const RANGE = 57487
const RAW = 57488
const REALM = 57489
const REDUCE = 57490
const RENAME = 57491
const RESPECT = 57492
const RETURN = 57493
const RETURNING = 57494
const REVOKE = 57495
const RIGHT = 57496
const ROLE = 57497
const ROLLBACK = 57498
const ROW = 57499
const ROWS = 57500
const SATISFIES = 57501
const SCHEMA = 57502
const SCOPE = 57503
const SELECT = 57504
const SELF = 57505
const SEMI = 57506
const SET = 57507
const SHOW = 57508
const SOME = 57509
const START = 57510
const STATISTICS = 57511
const STRING = 57512
const SYSTEM = 57513
const THEN = 57514
const TIES = 57515
const TO = 57516
const TRANSACTION = 57517
const TRIGGER = 57518
const TRUE = 57519
const TRUNCATE = 57520
const UNBOUNDED = 57521
const UNDER = 57522
const UNION = 57523
const UNIQUE = 57524
const UNKNOWN = 57525
const UNNEST = 57526
const UNSET = 57527
const UPDATE = 57528
const UPSERT = 57529
const USE = 57530
const USER = 57531
const USING = 57532
const VALIDATE = 57533
const VALUE = 57534
const VALUED = 57535
const VALUES = 57536
const VIA = 57537
const VIEW = 57538
const WHEN = 57539
const WHERE = 57540
const WHILE = 57541
const WINDOW = 57542
const WITH = 57543
const WITHIN = 57544
const WORK = 57545
const XOR = 57546
const INT = 57547
const NUM = 57548
const STR = 57549
const IDENT = 57550
const IDENT_ICASE = 57551
const NAMED_PARAM = 57552
const POSITIONAL_PARAM = 57553
const NEXT_PARAM = 57554
const LPAREN = 57555
const RPAREN = 57556
const LBRACE = 57557
const RBRACE = 57558
const LBRACKET = 57559
const RBRACKET = 57560
const RBRACKET_ICASE = 57561
const COMMA = 57562
const COLON = 57563
const INTERESECT = 57564
const EQ = 57565
const DEQ = 57566
const NE = 57567
const LT = 57568
const GT = 57569
const LE = 57570
const GE = 57571
const CONCAT = 57572
const PLUS = 57573
const STAR = 57574
const DIV = 57575
const MOD = 57576
const UMINUS = 57577
const DOT = 57578
const NSCOLON = 57579

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_ERROR_",
	"ADVISE",
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BUILD",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CORRELATED",
	"COVER",
	"CREATE",
	"CURRENT",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLATTEN",
	"FLUSH",
	"FOLLOWING",
	"FOR",
	"FORCE",
	"FROM",
	"FTS",
	"FUNCTION",
	"GOLANG",
	"GRANT",
	"GROUP",
	"GROUPS",
	"GSI",
	"HASH",
	"HAVING",
	"IF",
	"IGNORE",
	"ILIKE",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INFER",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JAVASCRIPT",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"KNOWN",
	"LANGUAGE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NAMESPACE_ID",
	"NEST",
	"NL",
	"NO",
	"NOT",
	"NOT_A_TOKEN",
	"NTH_VALUE",
	"NULL",
	"NULLS",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"OTHERS",
	"OUTER",
	"OVER",
	"PARSE",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PRECEDING",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROBE",
	"PROCEDURE",
	"PUBLIC",
	"RANGE",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RESPECT",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"ROW",
	"ROWS",
	"SATISFIES",
	"SCHEMA",
	"SCOPE",
	"SELECT",
	"SELF",
	"SEMI",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TIES",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNBOUNDED",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALIDATE",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIA",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"NUM",
	"STR",
	"IDENT",
	"IDENT_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
	"NSCOLON",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	213, 495,
	-2, 431,
	-1, 163,
	236, 127,
	-2, 129,
	-1, 260,
	223, 0,
	224, 0,
	225, 0,
	-2, 405,
	-1, 261,
	223, 0,
	224, 0,
	225, 0,
	-2, 406,
	-1, 262,
	223, 0,
	224, 0,
	225, 0,
	-2, 407,
	-1, 263,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 408,
	-1, 264,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 409,
	-1, 265,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 410,
	-1, 266,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 411,
	-1, 273,
	101, 0,
	-2, 414,
	-1, 274,
	79, 0,
	202, 0,
	-2, 416,
	-1, 275,
	79, 0,
	202, 0,
	-2, 418,
	-1, 349,
	236, 129,
	-2, 315,
	-1, 402,
	61, 151,
	91, 151,
	113, 151,
	184, 151,
	-2, 107,
	-1, 428,
	101, 0,
	-2, 415,
	-1, 429,
	79, 0,
	202, 0,
	-2, 417,
	-1, 430,
	79, 0,
	202, 0,
	-2, 419,
	-1, 446,
	93, 143,
	-2, 134,
	-1, 544,
	213, 363,
	-2, 122,
	-1, 586,
	213, 495,
	-2, 381,
	-1, 849,
	92, 143,
	-2, 268,
	-1, 955,
	213, 364,
	-2, 123,
	-1, 1081,
	92, 143,
	-2, 164,
}

const yyPrivate = 57344

const yyLast = 5302

var yyAct = [...]int{

	221, 9, 1077, 1060, 1038, 1061, 1075, 313, 96, 27,
	447, 717, 25, 611, 440, 150, 439, 969, 167, 726,
	96, 883, 871, 220, 153, 154, 155, 157, 754, 460,
	880, 929, 715, 844, 855, 716, 852, 227, 819, 663,
	614, 298, 714, 152, 95, 619, 161, 707, 818, 701,
	887, 165, 655, 785, 886, 403, 147, 238, 532, 970,
	770, 769, 547, 546, 763, 584, 609, 1080, 589, 1079,
	219, 660, 89, 583, 548, 224, 641, 535, 454, 479,
	534, 468, 759, 608, 446, 445, 383, 294, 574, 53,
	674, 243, 203, 217, 226, 206, 397, 334, 300, 444,
	361, 218, 96, 481, 208, 482, 25, 232, 233, 234,
	470, 293, 308, 180, 22, 44, 894, 279, 850, 237,
	422, 749, 250, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 95, 721,
	273, 274, 275, 158, 698, 704, 478, 420, 420, 8,
	679, 96, 709, 121, 697, 137, 96, 292, 208, 121,
	900, 102, 145, 423, 424, 425, 419, 419, 124, 125,
	126, 697, 120, 696, 650, 629, 627, 695, 120, 600,
	229, 231, 510, 495, 489, 142, 487, 147, 456, 382,
	696, 303, 147, 667, 1032, 664, 326, 656, 905, 164,
	381, 267, 387, 302, 964, 123, 363, 247, 248, 926,
	965, 624, 314, 314, 314, 927, 249, 244, 876, 140,
	384, 351, 729, 385, 381, 381, 825, 328, 420, 142,
	821, 799, 826, 626, 623, 241, 822, 1064, 236, 1035,
	405, 139, 421, 423, 424, 425, 325, 419, 1034, 123,
	414, 904, 268, 314, 314, 314, 498, 625, 943, 916,
	680, 338, 381, 666, 622, 842, 753, 735, 700, 352,
	357, 428, 429, 430, 694, 603, 412, 378, 688, 320,
	321, 322, 323, 324, 384, 329, 406, 809, 810, 417,
	727, 344, 327, 282, 561, 562, 811, 1004, 697, 160,
	247, 248, 100, 563, 101, 1063, 114, 457, 380, 249,
	462, 463, 376, 121, 377, 946, 390, 696, 392, 1003,
	469, 906, 1097, 109, 859, 388, 127, 122, 124, 125,
	126, 1036, 120, 990, 1013, 164, 164, 164, 164, 164,
	907, 937, 141, 340, 389, 901, 870, 824, 347, 752,
	738, 872, 372, 733, 500, 137, 314, 121, 401, 610,
	314, 504, 314, 505, 222, 374, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 999, 120, 109, 732, 218,
	514, 327, 515, 690, 268, 659, 519, 625, 521, 522,
	502, 501, 499, 123, 452, 433, 529, 366, 370, 365,
	453, 407, 437, 531, 96, 109, 530, 872, 767, 751,
	553, 476, 314, 290, 314, 732, 314, 559, 699, 140,
	459, 564, 649, 109, 599, 335, 304, 523, 598, 142,
	597, 493, 472, 485, 474, 160, 160, 160, 160, 160,
	147, 483, 96, 858, 473, 580, 581, 542, 543, 123,
	471, 438, 396, 290, 579, 306, 199, 198, 290, 197,
	503, 516, 520, 301, 117, 117, 117, 525, 987, 527,
	528, 427, 513, 512, 881, 484, 436, 435, 147, 518,
	617, 117, 612, 228, 612, 230, 291, 616, 164, 939,
	117, 164, 491, 118, 331, 336, 225, 537, 536, 331,
	336, 121, 348, 555, 554, 148, 117, 646, 590, 578,
	341, 244, 860, 591, 587, 122, 124, 125, 126, 348,
	120, 336, 159, 115, 115, 577, 586, 455, 245, 592,
	593, 480, 594, 268, 665, 601, 268, 268, 268, 268,
	268, 268, 141, 668, 368, 743, 595, 118, 681, 115,
	635, 163, 333, 533, 318, 1047, 615, 121, 1046, 148,
	163, 163, 163, 1021, 685, 1020, 628, 992, 630, 109,
	127, 122, 124, 125, 126, 786, 120, 349, 644, 109,
	652, 657, 204, 572, 573, 691, 291, 94, 160, 874,
	632, 160, 636, 118, 638, 683, 621, 705, 1001, 362,
	719, 442, 333, 336, 469, 148, 1076, 651, 1071, 648,
	692, 693, 654, 610, 533, 736, 316, 817, 915, 405,
	560, 346, 741, 566, 567, 568, 569, 570, 571, 330,
	677, 678, 676, 846, 756, 737, 618, 295, 373, 1044,
	281, 109, 441, 863, 1100, 1099, 772, 739, 637, 862,
	1094, 1045, 1030, 778, 779, 432, 246, 782, 240, 245,
	287, 312, 442, 647, 431, 406, 757, 758, 790, 544,
	405, 405, 794, 775, 740, 673, 773, 774, 731, 239,
	730, 553, 336, 422, 228, 722, 109, 268, 803, 1083,
	993, 1053, 422, 269, 541, 228, 808, 461, 812, 845,
	451, 90, 742, 653, 729, 669, 747, 1052, 748, 675,
	762, 980, 805, 806, 853, 771, 406, 406, 719, 719,
	768, 804, 1082, 798, 766, 792, 793, 670, 711, 750,
	553, 745, 185, 840, 784, 172, 954, 823, 280, 118,
	791, 96, 820, 841, 789, 788, 96, 360, 847, 118,
	656, 148, 719, 827, 829, 797, 816, 271, 796, 848,
	996, 148, 830, 536, 813, 536, 590, 587, 807, 815,
	814, 744, 861, 746, 689, 240, 846, 147, 183, 270,
	407, 1051, 147, 761, 856, 1043, 359, 164, 884, 832,
	211, 420, 839, 838, 834, 836, 405, 835, 672, 336,
	420, 336, 310, 336, 426, 421, 423, 424, 425, 311,
	419, 118, 898, 426, 421, 423, 424, 425, 336, 419,
	864, 891, 343, 148, 896, 210, 868, 719, 867, 719,
	869, 407, 407, 873, 875, 888, 892, 877, 337, 849,
	912, 193, 406, 878, 890, 885, 917, 918, 889, 1066,
	712, 893, 342, 289, 182, 820, 118, 350, 897, 933,
	922, 914, 720, 1026, 911, 307, 903, 919, 148, 910,
	908, 909, 188, 281, 631, 940, 162, 448, 184, 511,
	272, 924, 196, 449, 496, 494, 1068, 160, 278, 950,
	921, 448, 953, 289, 277, 492, 195, 276, 289, 951,
	181, 958, 951, 375, 866, 941, 960, 961, 309, 170,
	865, 449, 776, 191, 963, 1088, 725, 1096, 1095, 209,
	539, 967, 947, 450, 1031, 128, 948, 190, 719, 310,
	1065, 137, 309, 540, 451, 399, 1025, 662, 336, 764,
	178, 223, 820, 959, 169, 962, 1085, 884, 451, 1024,
	966, 450, 930, 194, 1015, 991, 1086, 407, 596, 968,
	856, 974, 973, 972, 1016, 734, 664, 982, 986, 989,
	988, 280, 795, 176, 981, 192, 765, 1002, 174, 315,
	317, 931, 173, 831, 189, 172, 1007, 1104, 1067, 1008,
	1009, 1103, 1062, 1010, 1011, 140, 1012, 345, 1005, 339,
	213, 212, 719, 305, 144, 142, 187, 935, 985, 971,
	151, 851, 162, 162, 162, 162, 162, 139, 576, 367,
	369, 371, 934, 1017, 1042, 123, 332, 1014, 936, 1018,
	1027, 332, 138, 640, 1029, 239, 1033, 1019, 168, 179,
	1042, 175, 284, 129, 1050, 952, 949, 297, 642, 932,
	1049, 391, 386, 942, 902, 783, 410, 781, 1059, 780,
	1058, 777, 526, 1078, 1072, 1074, 524, 517, 358, 1098,
	1042, 214, 575, 1073, 1084, 1006, 925, 787, 319, 1087,
	978, 977, 1092, 976, 1089, 1090, 1091, 944, 413, 96,
	1069, 208, 922, 25, 411, 1093, 207, 10, 235, 166,
	296, 99, 1102, 1101, 1078, 1078, 1106, 1107, 671, 1105,
	177, 149, 923, 186, 143, 119, 1, 353, 141, 639,
	760, 1037, 464, 1022, 1048, 95, 465, 1054, 466, 1023,
	364, 979, 879, 121, 724, 928, 913, 723, 620, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 477, 120, 713, 3, 854, 955, 1000, 11, 55,
	97, 755, 708, 103, 106, 162, 490, 1057, 162, 1070,
	486, 997, 283, 98, 920, 488, 91, 703, 507, 702,
	508, 588, 509, 582, 109, 54, 74, 497, 728, 837,
	103, 106, 843, 60, 613, 833, 42, 26, 41, 75,
	56, 40, 21, 91, 105, 39, 38, 14, 24, 12,
	78, 109, 54, 107, 20, 112, 70, 69, 68, 137,
	35, 67, 418, 72, 66, 34, 65, 64, 550, 63,
	62, 105, 33, 32, 31, 24, 71, 78, 30, 58,
	107, 29, 28, 19, 36, 18, 545, 17, 16, 15,
	7, 6, 5, 4, 2, 604, 605, 458, 882, 467,
	171, 61, 50, 77, 408, 117, 984, 983, 945, 23,
	661, 88, 76, 116, 398, 108, 706, 710, 443, 475,
	409, 538, 404, 140, 400, 402, 110, 111, 57, 50,
	77, 13, 117, 142, 857, 634, 23, 633, 88, 76,
	288, 585, 108, 49, 93, 139, 73, 92, 52, 202,
	201, 200, 51, 123, 938, 434, 47, 299, 242, 215,
	104, 216, 422, 48, 115, 84, 549, 83, 285, 43,
	79, 113, 0, 0, 0, 0, 0, 0, 0, 37,
	59, 0, 0, 47, 0, 0, 0, 104, 0, 0,
	0, 115, 0, 0, 118, 0, 0, 79, 81, 80,
	82, 45, 46, 85, 86, 87, 94, 0, 100, 0,
	101, 0, 551, 0, 0, 0, 0, 355, 0, 0,
	0, 103, 106, 0, 0, 81, 80, 82, 45, 46,
	85, 86, 87, 94, 91, 100, 0, 101, 0, 0,
	0, 0, 109, 54, 0, 0, 141, 0, 0, 0,
	0, 0, 552, 0, 0, 356, 0, 0, 0, 0,
	0, 121, 105, 0, 0, 0, 24, 0, 78, 0,
	420, 107, 0, 0, 127, 122, 124, 125, 126, 0,
	120, 103, 106, 426, 421, 423, 424, 425, 0, 419,
	0, 0, 0, 0, 91, 0, 0, 103, 106, 0,
	0, 0, 109, 54, 162, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 109, 54,
	50, 77, 105, 117, 0, 0, 24, 23, 78, 88,
	76, 107, 0, 108, 0, 0, 0, 0, 105, 0,
	0, 0, 24, 0, 78, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 91, 0, 104, 0,
	50, 77, 115, 117, 109, 54, 0, 23, 79, 88,
	76, 0, 0, 108, 0, 0, 50, 77, 0, 117,
	0, 0, 0, 23, 105, 88, 76, 0, 24, 108,
	78, 0, 0, 107, 0, 0, 81, 80, 82, 45,
	46, 85, 86, 87, 94, 0, 100, 0, 101, 0,
	0, 0, 0, 0, 47, 128, 0, 0, 104, 0,
	0, 137, 115, 354, 0, 0, 0, 0, 79, 0,
	47, 0, 0, 0, 104, 0, 0, 0, 115, 0,
	0, 0, 50, 77, 79, 117, 0, 0, 0, 23,
	0, 88, 76, 0, 0, 108, 81, 80, 82, 45,
	46, 85, 86, 87, 94, 0, 100, 0, 101, 0,
	0, 0, 81, 80, 82, 45, 46, 85, 86, 87,
	94, 128, 100, 552, 101, 140, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 142, 47, 0, 0, 565,
	104, 0, 0, 0, 115, 0, 0, 139, 0, 0,
	79, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 1056, 0, 0, 81, 80,
	82, 45, 46, 85, 86, 87, 94, 0, 100, 0,
	101, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 128, 0, 0, 0,
	0, 123, 137, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 0, 0, 121, 0, 0, 995, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 128, 120, 0, 301, 0, 140, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 141, 0, 123, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 0, 120, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 139, 0, 0, 0, 0, 137, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 956, 957, 0, 0, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 140, 120, 128, 0, 0, 0, 0, 0,
	137, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 141, 0, 0, 0, 0, 138,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	129, 0, 0, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 0, 120, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 128, 0,
	0, 301, 0, 0, 137, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 800, 801, 0, 0, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 140, 120,
	128, 0, 0, 0, 606, 0, 137, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 607, 0, 138, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 121, 686, 0, 0, 687, 0, 130, 131,
	132, 133, 134, 135, 136, 127, 122, 124, 125, 126,
	140, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	137, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 141, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 130, 131, 132, 133, 134, 135, 136, 127,
	122, 124, 125, 126, 140, 682, 128, 0, 0, 0,
	0, 0, 137, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 138, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 130, 131, 132, 133, 134, 135,
	136, 127, 122, 124, 125, 126, 140, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 556, 557, 0, 0, 0, 130, 131,
	132, 133, 134, 135, 136, 127, 122, 124, 125, 126,
	140, 120, 128, 0, 0, 0, 0, 0, 137, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 138, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 121, 415, 0, 0, 416, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 140, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 128, 0, 0, 0,
	103, 106, 137, 0, 139, 1039, 0, 0, 0, 0,
	0, 0, 123, 91, 0, 0, 0, 0, 0, 138,
	0, 109, 54, 0, 1041, 0, 0, 0, 0, 533,
	129, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 24, 0, 78, 121, 0,
	107, 0, 0, 0, 130, 131, 132, 133, 134, 135,
	136, 127, 122, 124, 125, 126, 140, 120, 128, 0,
	0, 0, 0, 0, 137, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 50,
	77, 0, 117, 138, 0, 141, 23, 0, 88, 76,
	0, 0, 108, 0, 129, 0, 0, 1028, 0, 0,
	121, 0, 0, 0, 0, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 140, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 128, 47, 0, 0, 0, 104, 137, 0,
	139, 115, 0, 0, 0, 0, 0, 79, 123, 1040,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 129, 0, 0, 141,
	0, 0, 0, 0, 0, 81, 80, 82, 45, 46,
	85, 86, 87, 94, 121, 100, 0, 101, 0, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 140, 120, 128, 0, 0, 0, 0, 0,
	137, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 138,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 975, 121, 0, 0, 0,
	0, 0, 130, 131, 132, 133, 134, 135, 136, 127,
	122, 124, 125, 126, 140, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 913, 0, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 140, 120,
	128, 0, 0, 0, 0, 0, 137, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 138, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 121, 899, 0, 704, 0, 0, 130, 131,
	132, 133, 134, 135, 136, 127, 122, 124, 125, 126,
	140, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	137, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 895, 0, 0,
	0, 0, 130, 131, 132, 133, 134, 135, 136, 127,
	122, 124, 125, 126, 140, 120, 128, 0, 0, 0,
	0, 0, 137, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 138, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 121, 0,
	0, 658, 0, 0, 130, 131, 132, 133, 134, 135,
	136, 127, 122, 124, 125, 126, 140, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	128, 0, 0, 0, 103, 106, 137, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 123, 91, 0, 0,
	0, 0, 0, 138, 0, 109, 54, 0, 1041, 0,
	0, 0, 0, 0, 129, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 24,
	0, 78, 121, 684, 107, 0, 0, 0, 130, 131,
	132, 133, 134, 135, 136, 127, 122, 124, 125, 126,
	140, 120, 128, 0, 0, 0, 0, 0, 137, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 50, 77, 0, 117, 138, 0, 141,
	23, 0, 88, 76, 0, 0, 108, 0, 129, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 140, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 128, 47, 0, 0,
	0, 104, 137, 645, 139, 115, 0, 0, 0, 0,
	0, 79, 123, 1040, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 141, 0, 0, 0, 0, 0, 81,
	80, 82, 45, 46, 85, 86, 87, 94, 121, 100,
	0, 101, 0, 0, 130, 131, 132, 133, 134, 135,
	136, 127, 122, 124, 125, 126, 140, 120, 128, 0,
	0, 0, 0, 0, 137, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 138, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 643, 0, 0,
	121, 0, 0, 0, 0, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 140, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 121, 0, 0, 0, 0, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 140, 120, 128, 0, 0, 0, 0, 0,
	137, 506, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 138,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 121, 0, 0, 394,
	0, 0, 130, 131, 132, 133, 134, 135, 136, 127,
	122, 124, 125, 126, 140, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 128, 0,
	0, 0, 103, 106, 137, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 123, 91, 0, 0, 0, 0,
	0, 138, 0, 109, 54, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 24, 0, 78,
	121, 0, 107, 393, 395, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 140, 120,
	128, 0, 0, 0, 0, 0, 137, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 50, 77, 0, 117, 138, 0, 141, 23, 0,
	88, 76, 0, 0, 108, 0, 129, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 130, 131,
	132, 133, 134, 135, 136, 127, 122, 124, 125, 126,
	140, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 128, 47, 0, 0, 0, 104,
	137, 0, 139, 115, 0, 0, 0, 0, 0, 79,
	123, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 141, 0, 0, 0, 0, 0, 81, 80, 82,
	45, 46, 85, 86, 87, 94, 121, 100, 0, 101,
	802, 0, 130, 131, 132, 133, 134, 135, 136, 127,
	122, 124, 125, 126, 140, 120, 128, 0, 0, 0,
	0, 0, 137, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 138, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 379, 0, 130, 131, 132, 133, 134, 135,
	136, 127, 122, 124, 125, 126, 140, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 0, 121, 0, 0, 0, 0, 0, 130, 131,
	132, 133, 134, 135, 136, 127, 122, 124, 125, 126,
	140, 120, 128, 0, 0, 0, 0, 0, 137, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 205, 128, 0, 138, 0, 141,
	0, 137, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 140, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 140, 0, 0, 0, 138,
	0, 286, 0, 0, 0, 142, 0, 0, 0, 0,
	129, 0, 0, 141, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 121, 0,
	0, 0, 138, 0, 130, 131, 132, 133, 134, 135,
	136, 127, 122, 124, 125, 126, 140, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 138, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 141, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 0, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	130, 131, 132, 133, 134, 135, 136, 127, 122, 124,
	125, 126, 55, 120, 0, 0, 103, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	55, 0, 0, 0, 103, 106, 0, 109, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	26, 0, 0, 56, 0, 109, 54, 105, 0, 0,
	0, 24, 0, 78, 0, 0, 107, 0, 26, 0,
	0, 56, 0, 0, 0, 105, 0, 0, 0, 24,
	0, 78, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 77, 0, 117, 0,
	0, 0, 23, 0, 88, 76, 0, 0, 108, 0,
	0, 0, 0, 50, 77, 0, 117, 0, 0, 0,
	23, 0, 88, 76, 0, 451, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 0, 103,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 91, 104, 0, 0, 0, 115, 0, 0,
	109, 54, 0, 79, 0, 0, 0, 47, 0, 0,
	0, 104, 0, 718, 0, 115, 56, 0, 0, 0,
	105, 79, 0, 0, 24, 0, 78, 118, 0, 107,
	0, 81, 80, 82, 45, 46, 85, 86, 87, 94,
	0, 100, 0, 101, 0, 118, 0, 0, 0, 81,
	80, 82, 45, 46, 85, 86, 87, 94, 0, 100,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 77,
	0, 117, 0, 0, 0, 23, 0, 88, 76, 0,
	0, 108, 103, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 103, 106, 0,
	0, 0, 0, 109, 54, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 109, 54,
	0, 0, 47, 105, 0, 0, 104, 24, 0, 78,
	115, 0, 107, 0, 0, 0, 79, 0, 105, 0,
	0, 0, 24, 0, 78, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 80, 82, 45, 46, 85,
	86, 87, 94, 0, 100, 0, 101, 0, 0, 0,
	0, 50, 77, 0, 117, 0, 0, 0, 23, 0,
	88, 76, 0, 0, 108, 0, 50, 77, 0, 117,
	0, 0, 0, 23, 0, 88, 76, 0, 0, 108,
	103, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 451, 0, 0, 0,
	0, 109, 54, 0, 0, 47, 0, 0, 0, 104,
	0, 0, 0, 115, 828, 0, 0, 0, 0, 79,
	47, 105, 0, 0, 104, 24, 0, 78, 115, 0,
	107, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 80, 82,
	45, 46, 85, 86, 87, 94, 0, 100, 0, 101,
	558, 0, 81, 80, 82, 45, 46, 85, 86, 87,
	94, 0, 100, 0, 101, 0, 0, 0, 0, 50,
	77, 0, 117, 0, 0, 0, 23, 0, 88, 76,
	0, 0, 108, 103, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 103, 106,
	0, 0, 0, 0, 109, 54, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 109,
	54, 0, 0, 47, 105, 0, 0, 104, 24, 0,
	78, 115, 156, 107, 0, 0, 0, 79, 0, 105,
	0, 0, 0, 24, 0, 78, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 80, 82, 45, 46,
	85, 86, 87, 94, 0, 100, 0, 101, 0, 0,
	0, 0, 50, 77, 0, 117, 0, 0, 0, 23,
	0, 88, 76, 0, 0, 108, 0, 50, 77, 0,
	117, 0, 0, 0, 23, 0, 88, 76, 0, 0,
	108, 103, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 103, 106, 0, 0,
	0, 0, 109, 54, 0, 0, 47, 0, 0, 91,
	104, 0, 0, 0, 115, 0, 0, 109, 54, 0,
	79, 47, 105, 0, 0, 104, 24, 0, 78, 115,
	0, 107, 0, 0, 0, 79, 0, 105, 0, 151,
	205, 24, 0, 78, 0, 0, 107, 0, 81, 80,
	82, 45, 46, 85, 86, 87, 94, 0, 100, 0,
	101, 0, 0, 81, 80, 82, 45, 46, 85, 86,
	87, 94, 0, 100, 0, 101, 0, 0, 0, 0,
	50, 77, 0, 117, 0, 0, 0, 23, 97, 88,
	76, 0, 0, 108, 0, 50, 77, 0, 117, 0,
	0, 98, 23, 0, 88, 76, 0, 0, 108, 103,
	106, 0, 109, 0, 74, 0, 0, 0, 0, 0,
	0, 60, 91, 0, 103, 106, 0, 75, 0, 0,
	109, 54, 0, 0, 47, 146, 0, 91, 104, 0,
	0, 0, 115, 112, 0, 109, 54, 0, 79, 47,
	105, 72, 0, 104, 24, 0, 78, 115, 0, 107,
	0, 0, 0, 79, 71, 105, 0, 58, 0, 0,
	0, 78, 0, 0, 107, 0, 81, 80, 82, 45,
	46, 85, 86, 87, 94, 0, 100, 0, 101, 61,
	0, 81, 80, 82, 45, 46, 85, 86, 87, 1081,
	0, 100, 0, 101, 0, 0, 0, 0, 50, 77,
	0, 117, 0, 0, 0, 23, 0, 88, 76, 0,
	0, 108, 0, 50, 77, 0, 117, 0, 0, 0,
	0, 0, 88, 76, 73, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 47, 0, 0, 0, 104, 37, 59, 0,
	115, 0, 0, 0, 0, 0, 79, 47, 0, 0,
	0, 104, 118, 0, 0, 115, 0, 0, 0, 0,
	0, 79, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 80, 82, 45, 46, 85,
	86, 87, 94, 0, 100, 0, 101, 0, 0, 81,
	80, 82, 45, 46, 85, 86, 87, 94, 0, 100,
	0, 101,
}
var yyPact = [...]int{

	1153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4003,
	-1000, 922, 5051, -1000, 4941, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5069, 5069, 4828, 5069, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 353, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5069, -1000, -1000, -1000, -1000, -1000, -1000, 857, 894, 890,
	975, 885, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 846, 692, 692, 845, 814, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 246, 244,
	243, 4813, -1000, -1000, 4334, 738, -1000, 919, 918, 1044,
	5069, 5069, 343, 487, 476, 275, 5069, 5069, 5069, -1000,
	-1000, -1000, -1000, -1000, -1000, 17, 613, 14, 320, 492,
	92, 1513, 5069, 5069, 5069, 5069, 5069, 5069, 5069, 5069,
	5069, 5069, 5069, 5069, 5069, 5069, 5069, 5084, 678, 5069,
	5069, 5069, 778, 5051, -1000, -1000, 942, 738, 292, 977,
	3931, 378, -1000, 4087, 96, 4003, 5069, 4003, 449, 983,
	451, 451, -45, -1000, 343, -58, 242, 806, 655, 610,
	548, -1000, 1057, 352, 352, 352, 352, 352, -1000, 72,
	-1000, -1000, -1000, -1000, -1000, -1000, 161, 394, 354, 917,
	302, 378, 394, 354, 915, 369, 378, 5069, 1371, 5069,
	1018, -1000, -1000, 3847, 550, 5069, 3775, 185, 183, 538,
	392, 346, 369, 779, 354, 98, 57, -1000, 3691, 90,
	5, 4003, -1000, -47, 64, 1001, -1000, 123, -1000, 64,
	1000, 64, 3619, 3535, 3463, 239, -1000, 836, 969, 5069,
	1050, -1000, 56, -1000, 1076, -1000, -1000, -1000, -1000, 5069,
	2287, 71, -64, -64, -58, -58, -58, 284, 4087, 4036,
	140, 140, 140, 1204, 1204, 1204, 1204, 1213, -1000, 5084,
	5069, 5069, 5069, 340, 96, 96, -1000, 545, -1000, -1000,
	-1000, -1000, -1000, 269, -1000, -1000, 87, 238, -1000, -1000,
	-1000, -1000, 4003, 477, -1000, 809, 354, -1000, -1000, -1000,
	-1000, 320, -1000, 319, -1000, -48, 5069, 679, 830, 5069,
	5069, -1000, 292, -1000, -1000, -1000, 292, -1000, 292, 5069,
	237, 231, 449, 449, -1000, 323, 352, 692, 323, 352,
	-1000, 344, -50, -1000, -1000, -1000, 344, -52, -1000, 302,
	771, -1000, 218, -1000, -1000, 761, -53, 760, 344, -1000,
	-1000, 42, 178, 5069, 177, -1000, -1000, 176, -1000, 550,
	5069, -1000, 5069, 3379, -1000, -1000, -1000, -1000, 292, -1000,
	292, -1000, 292, -54, 755, 354, -1000, -1000, 5069, 5069,
	-1000, 5069, 319, 1017, 275, 5069, 275, 5069, 5069, 275,
	1016, 275, 1012, 275, 275, 5069, 292, 355, -1000, 320,
	836, -1000, 835, 540, -1000, 1812, 451, 343, -1000, 1180,
	-1000, -1000, 320, 374, 2215, -1000, 4572, -1000, 5084, 86,
	1447, 5084, 5084, 5084, 5084, 5084, 5084, 574, 340, 96,
	96, -1000, -1000, -1000, 5051, 1006, 1006, -1000, 5069, 416,
	355, 318, 305, -1000, 837, 837, 795, 865, 217, 215,
	-1000, -1000, 211, -1000, -57, -1000, 319, 3307, -1000, -1000,
	-1000, -1000, 4003, 4003, -1000, -1000, -1000, 55, -1000, 2131,
	419, 561, 419, 561, 355, 446, -1000, 395, 44, -1000,
	13, 37, -1000, -1000, 44, 167, -60, 319, -61, 319,
	750, -1000, 354, 342, 354, 302, 354, -61, 967, 989,
	3223, 989, -1000, -1000, 3151, 4003, 5069, -1000, -1000, -1000,
	302, 354, 209, -1000, 4003, 4003, -62, -1000, -1000, 4003,
	64, 4003, 4003, 501, -1000, 64, -1000, 0, 0, 3067,
	171, 866, -1000, 5069, 43, -1000, -30, 355, 614, -1000,
	579, 579, 449, 449, -1000, -86, 40, 5069, -1000, -1000,
	-1000, -1000, -1000, 2059, -1000, -1000, -1000, -1000, -1000, 2995,
	583, -1000, -1000, 5069, 1975, 60, -69, -69, -70, -70,
	-70, 11, 5084, -1000, -1000, -1000, -1000, -1000, 169, 355,
	830, 830, 54, -1000, -46, -92, -1000, 205, 48, -1000,
	81, -1000, -1000, -1000, -1000, -1000, 5069, 302, 708, 4459,
	278, -97, -1000, 5069, 796, -1000, -1000, -1000, 70, -1000,
	202, 139, 873, 47, 5069, 70, 136, 830, 5069, -1000,
	-1000, 5069, 323, 337, 323, 352, 323, 319, -1000, 319,
	-115, 354, 196, 135, 46, -1000, 444, 444, 444, 633,
	879, 633, 195, 989, 584, 5069, 4003, 444, 444, 5069,
	278, 1011, 5069, 5069, 1009, 1007, 5069, 1005, 275, -1000,
	375, -1000, 1056, -1000, 320, 4003, 320, 5069, 866, 5069,
	5069, 5069, -1000, -1000, -1000, -1000, 881, -1000, -1000, 319,
	1431, 1812, -1, -1000, -1000, 1903, -1000, 3622, -1000, 583,
	-1000, 830, 552, 552, 318, 5069, 79, 5069, 305, 5069,
	305, -1000, -1000, 553, 275, 4003, 16, -1000, 444, -1000,
	133, -1000, -1000, 12, -1000, -1000, -1000, 4700, 5069, 4003,
	451, 278, -1000, -1000, 879, -1000, -1000, 165, -1000, 1180,
	-1000, -1000, 5069, 292, 45, 507, 4003, -1000, 292, 552,
	715, 4003, -1000, -1000, 44, -1000, 44, -1000, -118, 278,
	581, 4459, 228, 304, -1000, -1000, 576, -1000, -1000, 584,
	-1000, 790, 784, -1000, -1000, -1000, 584, 355, 584, -1000,
	-1000, 138, 4003, 388, 388, 4, -1000, -1000, 4003, 4003,
	-1000, -1000, 4003, -1000, 0, 496, 266, 5069, 43, -1000,
	4003, 375, 711, 697, 1812, 5069, -120, -1000, -1000, -1000,
	-1000, -1000, -1000, 2839, 552, -1000, -1000, -1000, 2911, -1000,
	-1000, 5069, 2755, -63, 131, -1000, 1004, 275, 31, -1000,
	119, -1000, 302, -1000, -1000, 395, 4459, -1000, 5069, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40, 5069,
	2683, 552, 426, 39, -1000, 5069, 5069, 552, -1000, 561,
	278, -1000, 444, 1055, -5, -1000, 939, -1000, 5069, 938,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 127, -1000,
	-1000, -1000, 281, -1000, 5069, -1000, 444, 1003, -1000, 38,
	-1000, 1075, 95, -1000, 1812, -1000, -1000, 982, 4587, -1000,
	981, 4587, -1000, 612, 278, -1000, -1000, -1000, 1747, -1000,
	5069, -1000, -1000, 31, 275, 5069, 5069, 275, -1000, -1000,
	-1000, -1000, 4003, 5069, -1000, -10, 650, 4003, 4003, -1000,
	5069, -1000, 867, -1000, 388, 935, 581, 4459, -1000, 939,
	-1000, -1000, -1000, 2599, 1071, 1069, 1068, -1000, 578, -1000,
	4003, -1000, -1000, 266, 194, 933, 5069, -1000, -1000, 260,
	4003, 877, 125, 4003, 5069, -1000, -1000, -1000, 4003, -1000,
	4003, 4003, 488, 1586, -1000, 634, -1000, 2527, -1000, -1000,
	-1000, 162, 400, -1000, -1000, -1000, 5069, 104, 82, 607,
	1054, -1000, -1000, -1000, -1000, 5069, -1000, -1000, 5069, 5069,
	-1000, 4003, 5069, 5069, -1000, 5069, 120, 830, 848, 5069,
	444, 5069, 4003, 358, 356, 791, 5069, 4003, 4003, 4003,
	4003, 4003, 2443, -1000, 552, 480, 818, -20, 388, -1000,
	28, 19, 117, 2530, -1000, -1000, -1000, 5, -1000, -1000,
	599, 479, -1000, -1000, 351, 348, -1000, 997, -1000, 3154,
	644, 534, 1652, 477, 355, 906, 89, 21, -1000, 815,
	1081, -1000, -1000, -1000, -1000, -1000, -1000, 411, 416, 355,
	409, -1000, 4956, -1000, -1000, 593, 532, -1000, -1000, 3154,
	-1000, 840, -1000, 355, -1000, -1000, 799, -1000, 2371, 355,
	355, 4316, -1000, -1000, -1000, 478, 812, -1000, 811, -1000,
	-1000, -1000, 916, 108, 1029, 473, 472, 355, 355, 905,
	901, -1000, 409, 4956, 4956, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1329, 115, 1328, 1327, 1325, 1323, 93, 1321, 1319,
	0, 114, 201, 23, 70, 77, 91, 80, 1318, 98,
	1317, 41, 37, 1315, 1314, 1312, 1311, 1310, 1309, 100,
	582, 1308, 1307, 1304, 94, 75, 86, 52, 1303, 1301,
	72, 660, 701, 1300, 1297, 1295, 1294, 89, 43, 9,
	809, 1288, 7, 1287, 1286, 1285, 119, 1284, 55, 1282,
	46, 1281, 1280, 65, 161, 306, 838, 78, 261, 87,
	111, 1279, 1278, 99, 85, 84, 1277, 54, 50, 1276,
	47, 96, 1274, 1273, 5, 58, 76, 71, 1270, 1268,
	39, 1267, 1266, 74, 63, 1264, 57, 1260, 18, 81,
	1259, 21, 1258, 697, 29, 112, 1257, 1256, 1255, 1254,
	149, 1253, 1252, 1251, 1250, 1249, 1248, 1247, 1245, 1244,
	1243, 1242, 1241, 1238, 1234, 1233, 1232, 1230, 1229, 1227,
	1226, 1225, 1224, 1221, 1220, 1218, 1217, 1216, 1214, 1206,
	1205, 1202, 1201, 1198, 1196, 105, 66, 83, 1195, 1194,
	1192, 33, 69, 67, 13, 1189, 1188, 19, 16, 73,
	1183, 14, 68, 1181, 1179, 49, 38, 48, 1177, 1174,
	1172, 1171, 1169, 1167, 3, 2, 6, 152, 1166, 1162,
	425, 97, 629, 36, 1161, 28, 59, 17, 32, 35,
	1157, 34, 1155, 1154, 1096, 1153, 42, 1151, 1138, 45,
	146, 103, 1039, 113, 79, 1137, 1135, 31, 64, 1134,
	53, 1132, 30, 22, 60, 61, 1131, 1129, 1127, 1124,
	1123, 1121, 4, 82, 1120, 1119, 1117, 1116, 1115, 1114,
	1111, 88, 1110, 62, 1108, 90, 10, 110, 40, 1101,
	11, 1100, 117, 1099, 1098,
}
var yyR1 = [...]int{

	0, 227, 227, 228, 228, 109, 109, 109, 109, 109,
	110, 110, 110, 110, 110, 110, 110, 111, 229, 229,
	112, 230, 113, 170, 170, 23, 23, 23, 231, 231,
	114, 3, 3, 118, 119, 232, 232, 197, 199, 199,
	198, 115, 116, 116, 116, 116, 116, 117, 117, 117,
	138, 138, 126, 126, 126, 126, 131, 131, 134, 134,
	134, 141, 141, 141, 49, 49, 49, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	50, 50, 52, 52, 54, 53, 96, 95, 95, 62,
	62, 62, 233, 233, 233, 94, 94, 93, 93, 93,
	21, 21, 20, 20, 19, 57, 57, 56, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 58, 58, 234,
	234, 59, 60, 60, 64, 64, 65, 66, 67, 68,
	69, 69, 72, 72, 72, 72, 72, 72, 72, 73,
	74, 75, 75, 236, 236, 79, 79, 80, 76, 76,
	70, 61, 61, 61, 235, 235, 77, 78, 81, 81,
	82, 17, 17, 15, 83, 83, 18, 18, 16, 84,
	84, 85, 87, 87, 88, 88, 102, 102, 101, 89,
	89, 90, 91, 91, 92, 98, 98, 97, 100, 100,
	99, 108, 108, 107, 107, 205, 205, 208, 208, 209,
	104, 104, 103, 106, 106, 105, 121, 121, 145, 145,
	145, 237, 237, 237, 238, 147, 147, 146, 146, 148,
	148, 148, 152, 153, 157, 157, 156, 155, 155, 149,
	150, 151, 154, 154, 154, 154, 122, 122, 123, 124,
	124, 124, 158, 160, 160, 159, 159, 39, 165, 165,
	164, 168, 168, 167, 167, 166, 166, 166, 166, 22,
	37, 37, 161, 163, 163, 162, 125, 71, 169, 169,
	171, 171, 171, 171, 172, 172, 172, 176, 176, 173,
	173, 173, 174, 175, 175, 175, 175, 139, 139, 202,
	202, 203, 203, 203, 203, 203, 201, 201, 200, 200,
	204, 204, 140, 140, 132, 133, 135, 136, 137, 239,
	239, 127, 127, 178, 178, 177, 179, 179, 181, 181,
	181, 180, 180, 182, 182, 183, 183, 185, 185, 184,
	184, 184, 187, 187, 186, 192, 192, 191, 188, 188,
	188, 188, 189, 240, 240, 190, 190, 206, 206, 206,
	207, 207, 207, 128, 128, 128, 129, 129, 130, 142,
	41, 41, 43, 42, 42, 44, 44, 45, 45, 46,
	46, 46, 46, 143, 144, 120, 241, 241, 195, 195,
	196, 63, 63, 63, 63, 63, 63, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 242, 242, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	243, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 9, 9, 8,
	8, 7, 7, 5, 14, 14, 13, 13, 6, 6,
	6, 25, 26, 26, 27, 30, 30, 28, 29, 29,
	38, 38, 38, 38, 38, 40, 31, 31, 32, 32,
	32, 32, 32, 35, 35, 34, 34, 34, 34, 36,
	33, 33, 33, 47, 47, 47, 244, 48, 48, 193,
	193, 194, 194, 194, 210, 210, 211, 211, 212, 213,
	24, 24, 216, 216, 220, 220, 217, 217, 217, 219,
	219, 219, 219, 219, 221, 221, 222, 222, 222, 222,
	218, 218, 223, 223, 224, 224, 225, 225, 226, 226,
	86, 86, 215, 215, 214, 214,
}
var yyR2 = [...]int{

	0, 2, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	2, 0, 5, 0, 1, 0, 2, 2, 1, 1,
	3, 0, 2, 1, 5, 0, 1, 0, 0, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 4, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 1, 1, 1, 7, 7, 2, 2, 4, 0,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 2,
	0, 1, 1, 2, 1, 0, 1, 2, 1, 5,
	7, 5, 7, 5, 6, 6, 7, 1, 3, 1,
	1, 3, 2, 6, 1, 2, 2, 1, 1, 1,
	0, 2, 1, 1, 1, 2, 2, 2, 2, 3,
	4, 4, 1, 0, 1, 1, 3, 2, 1, 1,
	1, 0, 1, 2, 0, 1, 4, 4, 0, 1,
	2, 1, 3, 3, 0, 2, 1, 3, 3, 0,
	1, 2, 0, 1, 5, 1, 1, 3, 2, 0,
	1, 2, 0, 1, 2, 0, 1, 3, 1, 3,
	3, 0, 1, 1, 1, 0, 2, 1, 1, 1,
	0, 1, 2, 0, 1, 2, 6, 8, 2, 2,
	6, 0, 6, 8, 2, 1, 3, 2, 2, 1,
	1, 1, 5, 7, 0, 1, 2, 1, 2, 2,
	2, 2, 1, 3, 5, 3, 6, 8, 7, 8,
	7, 7, 2, 1, 3, 4, 5, 4, 0, 1,
	3, 2, 3, 1, 3, 3, 3, 5, 5, 1,
	0, 2, 2, 1, 3, 2, 12, 1, 0, 1,
	0, 6, 6, 6, 0, 6, 6, 0, 6, 2,
	3, 2, 1, 2, 2, 2, 4, 4, 6, 1,
	3, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 3, 4, 6, 3, 3, 3, 3, 3, 1,
	1, 9, 12, 0, 1, 1, 0, 1, 1, 2,
	5, 1, 6, 4, 3, 0, 6, 0, 1, 2,
	2, 2, 0, 1, 2, 1, 3, 2, 1, 2,
	3, 2, 1, 1, 1, 0, 2, 0, 1, 2,
	1, 1, 1, 6, 6, 6, 7, 7, 8, 7,
	1, 1, 1, 2, 6, 0, 1, 1, 3, 3,
	4, 8, 8, 3, 6, 8, 0, 1, 1, 3,
	1, 1, 3, 3, 5, 5, 4, 1, 3, 3,
	5, 5, 4, 5, 6, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	0, 5, 1, 3, 3, 5, 5, 4, 5, 6,
	4, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 3, 1, 3, 0, 1, 1, 3, 1, 1,
	1, 3, 1, 1, 3, 4, 5, 2, 0, 2,
	7, 7, 7, 6, 4, 1, 1, 1, 4, 4,
	4, 6, 6, 1, 3, 3, 3, 5, 5, 2,
	6, 6, 8, 3, 3, 1, 0, 5, 3, 1,
	1, 2, 3, 2, 0, 2, 1, 3, 3, 6,
	0, 1, 0, 3, 0, 3, 1, 1, 1, 0,
	3, 3, 2, 2, 1, 4, 2, 2, 2, 2,
	1, 1, 0, 1, 2, 2, 0, 2, 1, 1,
	0, 4, 0, 1, 2, 2,
}
var yyChk = [...]int{

	-1000, -227, -109, -193, -111, -112, -113, -114, -110, -10,
	-194, 5, 56, 138, 54, -115, -116, -117, -118, -120,
	-138, -141, -11, 116, 55, -240, 44, -49, -121, -122,
	-123, -124, -125, -126, -131, -134, -119, 186, -139, -140,
	-142, -143, -144, -1, -2, 208, 209, 163, -6, -38,
	109, -25, -31, -47, 32, 6, 47, -51, 86, 187,
	40, 108, -127, -128, -129, -130, -132, -133, -135, -136,
	-137, 83, 70, 153, 33, 46, 119, 110, 57, 177,
	206, 205, 207, -4, -5, 210, 211, 212, 118, -40,
	-42, 23, -32, -33, 213, -48, -52, 7, 20, -239,
	215, 217, -64, 10, 167, 51, 11, 60, 122, 31,
	-54, -53, 62, 178, -65, 171, -83, 112, 201, -228,
	236, 217, 231, 109, 232, 233, 234, 230, 9, 127,
	223, 224, 225, 226, 227, 228, 229, 15, 116, 101,
	79, 202, 89, -229, 82, -110, 54, -48, 213, -230,
	-10, 68, -48, -10, -10, -10, 44, -10, -145, 169,
	-68, -60, -66, 208, -64, -10, -243, -98, 181, 87,
	52, -97, 128, 88, 88, 66, 88, -232, 94, -202,
	-203, 208, 162, 86, 186, 40, -202, 161, 27, 139,
	82, 68, 161, 27, 139, 82, 68, 213, 213, 213,
	-26, -27, -28, -10, -30, 197, -10, -194, -49, 181,
	87, 52, 82, 82, 27, -9, -8, -7, -10, -14,
	-13, -10, -68, -66, -35, 9, -34, -22, 208, -35,
	9, -35, -10, -10, -10, -244, 221, -56, -96, 66,
	162, 221, -18, -16, -19, 208, 164, 208, 209, 217,
	-10, 232, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -12, -11, 15,
	101, 79, 202, -10, -10, -10, 119, 116, 110, -242,
	193, 95, -110, -170, 65, -3, 190, -41, -43, -42,
	-68, 208, -10, -70, -69, 188, -241, 64, -21, -20,
	-19, 12, -21, 236, -68, -66, 213, -103, -105, 102,
	123, -50, 6, -52, -48, -50, 6, -50, 6, 21,
	-145, -145, -145, -145, -145, 174, 124, 220, 66, 124,
	-182, -65, -66, 208, -181, -180, -65, -66, -68, 82,
	-177, 208, -41, -182, -181, 82, -180, -177, -65, 208,
	-41, -13, -14, -226, 232, 6, 44, -14, 50, -30,
	197, -29, 49, -10, 214, 214, 214, -50, 6, -50,
	6, -50, 6, -180, -177, 124, -181, 216, 220, 221,
	218, 220, 236, -36, 220, 159, 51, 79, 202, 221,
	-36, 51, -36, 64, 64, 221, 213, -81, -82, 99,
	-57, -56, -55, -58, -59, -10, -60, -64, -95, -62,
	6, 44, 220, 12, -10, 218, 221, 218, 9, 236,
	217, 231, 109, 232, 233, 234, 230, -12, -10, -10,
	-10, 119, 110, -242, -23, 208, 207, -2, 213, -158,
	-161, 165, 185, -72, -73, -74, -75, -236, 82, 74,
	114, 139, -181, -19, -67, 208, 236, -10, -106, -105,
	-104, -103, -10, -10, -50, -50, -50, -100, -99, -10,
	-237, 213, -237, 213, -70, -71, -69, -197, -200, -204,
	208, -201, -145, -203, -200, -201, -66, 236, -66, 236,
	-178, -177, 124, 213, 124, 236, 124, -66, 214, 214,
	-10, 214, 214, -29, -10, -10, 172, -50, -50, -50,
	236, 124, -181, -7, -10, -10, -67, 50, -34, -10,
	-35, -10, -10, -22, 50, -35, 50, -35, -35, -10,
	-49, -84, -85, 198, -17, -15, -19, -81, -61, 85,
	98, 154, -21, -21, -68, -66, -94, -233, -93, 146,
	48, 192, 232, -10, -16, -47, 218, 219, 218, -10,
	-12, 208, 209, 217, -10, 232, -12, -12, -12, -12,
	-12, -12, 9, -110, -231, 66, 12, -231, -14, -161,
	-84, -84, -160, -159, -63, -39, 208, -40, -163, -162,
	-63, 208, -75, -75, -74, -73, 93, 213, 213, 213,
	236, -67, 214, 220, -108, -107, 13, 42, -147, -146,
	194, -154, -236, -149, -238, -147, -154, -84, 190, -199,
	-198, 201, 220, 221, 174, 220, 66, 236, -67, 236,
	-67, 124, -181, -44, -45, 208, -181, -177, -181, -225,
	66, -86, 59, 214, -86, 172, -10, -177, -181, 213,
	236, -36, 79, 202, -36, -37, 197, -37, 64, 214,
	-87, -88, 71, -90, 100, -10, 220, 223, -84, 91,
	113, -234, 184, 61, -235, 130, -235, -69, -69, 236,
	220, -10, 236, -21, 218, -10, 218, 221, 218, -12,
	214, -84, -104, -104, 220, 223, 236, 217, 236, 213,
	220, -165, -164, -168, 64, -10, -79, -80, -179, -177,
	-76, 20, 142, -195, -196, -188, -189, -240, 44, -10,
	-68, 236, -99, -205, -209, 120, -157, 220, -156, 152,
	-152, -153, 213, 214, 92, 220, -10, -157, 214, -104,
	-58, -10, -204, 208, -200, -145, -200, -67, -67, 236,
	-181, 213, 214, 220, -185, -184, 190, -185, -185, -223,
	-224, 150, 77, -208, 60, 97, -223, 213, -86, -215,
	-214, 131, -10, -185, -185, -13, -68, 50, -10, -10,
	50, 50, -10, 50, -35, -210, 200, 21, -17, -15,
	-10, -87, -58, -58, -10, 91, -67, -93, -21, 232,
	218, 219, 218, -10, -104, -157, -157, -159, -10, 208,
	209, 217, -10, -63, -14, -162, -37, 64, -167, -166,
	-22, 214, 220, -185, 214, 214, 220, -189, 44, -189,
	-21, -68, -208, -148, -146, -152, -153, -155, -94, -233,
	-10, -49, 220, -150, -151, 192, 126, -49, -157, 124,
	236, -68, -183, 133, -192, -191, -188, -46, 215, 96,
	208, 196, 73, 67, -214, 120, 120, -215, -85, -215,
	208, -213, 213, -186, 201, -186, 214, -37, -96, -211,
	-212, 208, -102, -101, -10, -210, -77, -78, 124, -77,
	-78, 124, -21, -58, 236, 218, -157, -165, -10, 218,
	223, 214, 50, -167, 220, 79, 202, 221, -80, -199,
	-196, -189, -10, 220, -157, 192, 220, -10, -10, -157,
	-169, -238, -236, -68, -185, 21, 214, 220, -206, -207,
	13, 42, 110, -10, 84, 69, 90, 214, -24, 208,
	-10, -185, 50, 220, 12, -89, 220, -90, -21, 64,
	-10, -236, 64, -10, 124, -68, 218, 219, -10, -166,
	-10, -10, -22, -10, 214, 220, -151, -10, 92, -187,
	-186, 74, -183, -191, -207, 216, 12, 12, 12, -216,
	133, -212, -213, -91, -92, 75, -101, 208, 93, 92,
	208, -10, 79, 202, 214, 220, 126, -171, 197, 213,
	-190, 198, -10, 215, 215, -98, 21, -10, -10, -10,
	-10, -10, -10, 214, -104, 106, 116, -13, -185, -189,
	207, 207, -220, -217, 158, 145, 72, -13, 214, -157,
	172, 106, 214, -187, 220, 220, 214, -221, -222, 15,
	179, 34, -10, 186, 40, 172, 207, 207, -219, 53,
	-222, 137, 63, 157, -218, 137, 63, -173, -158, -161,
	-174, -84, 86, 216, 216, 115, 34, 173, 71, 9,
	-172, 197, -84, -161, -84, -176, 197, -175, -10, -152,
	-153, 213, 129, 157, -222, 106, 116, -84, 116, -84,
	-84, -84, -10, -154, 172, 106, 106, 214, 40, 172,
	172, -84, -174, 86, 86, -176, -175, -175,
}
var yyDef = [...]int{

	164, -2, 3, 2, 5, 6, 7, 8, 9, 519,
	520, 18, 164, 21, 0, 10, 11, 12, 13, 14,
	15, 16, 387, 0, 0, 0, 0, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 33, 0, 50, 51,
	61, 62, 63, 429, 430, -2, 432, 433, 434, 435,
	0, 437, 438, 439, 440, 343, 344, 185, 0, 0,
	0, 0, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 35, 0, 0, 0, 0, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 478, 479, 480, 0, 0,
	0, 0, 496, 497, 164, 515, 67, 0, 0, 0,
	467, 474, 0, 0, 0, 0, 0, 0, 0, 516,
	82, 83, 309, 310, 124, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 19, 20, 0, 0, 164, 23,
	31, 0, 515, 404, 426, 521, 0, 523, 130, 376,
	100, 100, 0, -2, 0, 436, 0, 64, 164, 164,
	164, 186, 0, 0, 0, 0, 0, 0, 36, 0,
	289, 291, 292, 293, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 474,
	0, 482, 483, 0, 488, 0, 0, 0, 0, 164,
	164, 164, 0, 0, 0, 0, 468, 469, 472, 0,
	475, 476, 363, 0, 0, 0, 503, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 125, 158, 105, 0,
	89, 126, 165, 166, 0, 104, 4, 388, 389, 0,
	0, 0, 396, 397, 398, 399, 400, 401, 402, 403,
	-2, -2, -2, -2, -2, -2, -2, 0, 442, 0,
	0, 0, 0, -2, -2, -2, 420, 0, 422, 424,
	427, 428, 17, 25, 24, 30, 0, 0, 360, 361,
	362, 129, 522, 0, 150, 143, 0, 377, 208, 101,
	102, 0, 209, 0, 122, 0, 0, 203, 200, 0,
	0, 68, 164, 80, 81, 70, 164, 72, 164, 0,
	211, 211, 130, 130, 37, 0, 0, 0, 0, 0,
	304, 0, 0, 127, 306, 318, 0, 0, 321, 313,
	0, 315, 0, 305, 307, 0, 0, 0, 0, -2,
	373, 0, 0, 0, 0, 558, 559, 0, 481, 488,
	0, 487, 0, 0, 513, 514, 518, 74, 164, 76,
	164, 78, 164, 0, 0, 0, 308, 466, 0, 0,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 169, 159, 0,
	158, 106, -2, 108, 117, 100, 100, 0, 86, 0,
	90, 91, 0, 0, 0, 392, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	-2, 421, 423, 425, 164, 0, 0, 32, 474, 169,
	169, 0, 0, 131, 132, 133, -2, 0, 0, 0,
	142, 144, 0, 103, 0, 128, 0, 0, 65, 204,
	66, 201, 202, 205, 69, 71, 73, 187, 188, 191,
	0, 143, 0, 143, 169, 0, 267, 38, 287, 298,
	300, 0, 296, 290, 302, 0, 0, 0, 319, 0,
	0, 314, 0, 365, 0, 0, 0, 0, 556, 560,
	0, 560, 494, 484, 0, 489, 0, 75, 77, 79,
	0, 0, 0, 470, 471, 477, 0, 498, 504, 509,
	0, 505, 506, 0, 499, 0, 500, 260, 260, 0,
	0, 172, 170, 0, 160, 161, 0, 169, 0, 152,
	154, 154, 130, 130, -2, 0, 87, 0, 95, 92,
	93, 94, 97, 100, 167, 168, 390, 391, 393, 0,
	412, 443, 444, 0, 0, 0, 451, 452, 453, 454,
	455, 456, 0, 22, 26, 28, 29, 27, 0, 169,
	200, 200, 242, 243, 0, 0, -2, 0, 262, 263,
	248, 381, 137, 135, 136, 138, 0, 316, 0, 0,
	0, 0, 441, 0, 195, 192, 193, 194, 224, 215,
	0, 0, 0, 232, 0, 224, 0, 200, 0, 34,
	39, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 0, 366, 367, 327, 327, 327, 552,
	0, 552, 0, 560, 562, 0, 485, 327, 327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 517,
	524, 173, 0, 175, 0, 171, 0, 0, 172, 0,
	0, 0, 119, 120, 153, 155, 0, 118, 121, 0,
	0, 100, 0, 99, 394, 0, 447, 0, 450, 413,
	374, 200, 224, 224, 0, 0, 0, 0, 0, 474,
	0, 265, 249, 260, 0, 139, 0, 145, 327, 317,
	0, 148, 149, 0, 378, 380, 338, 0, 0, 342,
	100, 0, 189, 190, 0, 199, 206, 0, 225, 0,
	217, 218, 0, 164, 214, 0, 229, 236, 164, 224,
	0, 40, 299, 301, 288, 297, 303, 323, 0, 0,
	325, 0, 0, 0, 353, 328, 0, 354, 355, 0,
	553, 0, 0, 557, 197, 198, 562, 0, 562, 493,
	563, 0, 486, 0, 0, 0, 364, 501, 507, 508,
	502, 510, 261, 511, 260, 0, 0, 0, 181, 162,
	163, 524, 0, 0, 100, 0, 0, 96, 88, 98,
	445, 446, 448, 0, 224, 240, 241, 244, 248, 382,
	383, 0, 0, 0, 0, 264, 0, 0, 251, 253,
	0, 140, 316, 147, 141, 38, 0, 339, 0, 341,
	210, 123, 196, 216, 219, 220, 221, 226, 227, 0,
	0, 224, 0, 233, 235, 0, 0, 224, 238, -2,
	0, 320, 327, 0, 0, 335, 347, 359, 0, 0,
	368, 329, 330, 331, 490, 554, 555, 491, 0, 492,
	564, 565, 530, 356, 0, 357, 327, 0, 84, 525,
	526, 0, 179, 176, 100, 85, 109, 0, 143, 111,
	0, 143, 113, 0, 0, 449, 239, 245, 0, 386,
	0, 247, 250, 252, 0, 0, 0, 0, 146, 375,
	379, 340, 228, 0, 207, 0, 0, 230, 231, 237,
	0, 269, 0, 322, 332, 0, 325, 0, 337, 348,
	350, 351, 352, 0, 0, 0, 0, 561, 532, 531,
	334, 358, 512, 0, 0, 182, 0, 180, 178, 0,
	114, 0, 0, 115, 0, -2, 384, 385, 246, 254,
	255, 256, 0, 0, 212, 0, 234, 270, 214, 311,
	333, 0, 345, 336, 349, 369, 0, 0, 0, 185,
	0, 527, 528, 174, 183, 0, 177, 110, 0, 0,
	112, 116, 0, 0, 222, 0, 0, 200, 0, 0,
	327, 0, 370, 0, 0, 534, 0, 184, 156, 157,
	257, 258, 0, 213, 224, 0, 0, 0, 332, 346,
	0, 0, 0, 0, 536, 537, 538, 533, 223, 266,
	0, 0, 326, 312, 0, 0, 529, 539, 544, 0,
	0, 0, 0, 0, 169, 0, 0, 0, 535, 0,
	0, 546, 547, 548, 549, 550, 551, 274, 169, 169,
	277, 282, 0, 371, 372, 0, 0, 542, 543, 0,
	271, 0, 279, 169, 281, 272, 0, 273, 169, 169,
	169, -2, 540, 541, 545, 0, 0, 280, 0, 283,
	284, 285, 0, 0, 0, 0, 0, 169, 169, 0,
	0, 286, 277, 0, 0, 275, 276, 278,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:487
		{
			yylex.(*lexer).setStatement(yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:492
		{
			yylex.(*lexer).setExpression(yyDollar[1].expr)
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:498
		{
			/* nothing */
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:535
		{
			yyVAL.statement = algebra.NewAdvise(yyDollar[3].statement, yylex.(*lexer).Remainder(yyDollar[1].tokOffset))
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:544
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:551
		{
			yyVAL.statement = algebra.NewExplain(yyDollar[2].statement, yylex.(*lexer).Remainder(yyDollar[1].tokOffset))
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:558
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:562
		{
			yyVAL.statement = algebra.NewPrepare(yyDollar[4].s, yyDollar[3].b, yyDollar[5].statement, yylex.(*lexer).getText(), yylex.(*lexer).getOffset())
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:569
		{
			yyVAL.b = false
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:574
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
			yyVAL.b = true
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:582
		{
			yyVAL.s = ""
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:587
		{
			yyVAL.s = yyDollar[1].s
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:592
		{
			yyVAL.s = yyDollar[1].s
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:599
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:604
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:611
		{
			yyVAL.statement = algebra.NewExecute(yyDollar[2].expr, yyDollar[3].expr)
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:618
		{
			yyVAL.expr = nil
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:623
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:634
		{
			yyVAL.statement = algebra.NewInferKeyspace(yyDollar[3].keyspaceRef, yyDollar[4].inferenceType, yyDollar[5].val)
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:641
		{
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:649
		{
			yyVAL.inferenceType = datastore.INF_DEFAULT
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:656
		{
			yyVAL.val = nil
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:665
		{
			yyVAL.val = yyDollar[2].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:675
		{
			yyVAL.statement = yyDollar[1].fullselect
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:740
		{
			yyVAL.fullselect = algebra.NewSelect(yyDollar[1].subresult, yyDollar[2].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:745
		{
			yyVAL.fullselect = algebra.NewSelect(yyDollar[1].subresult, yyDollar[2].order, yyDollar[4].expr, yyDollar[3].expr) /* OFFSET precedes LIMIT */
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:750
		{
			yyVAL.fullselect = algebra.NewSelect(yyDollar[1].subresult, yyDollar[2].order, yyDollar[3].expr, yyDollar[4].expr) /* OFFSET precedes LIMIT */
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:757
		{
			yyVAL.subresult = yyDollar[1].subselect
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:762
		{
			yyVAL.subresult = algebra.NewUnion(yyDollar[1].subresult, yyDollar[3].subresult)
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:767
		{
			yyVAL.subresult = algebra.NewUnionAll(yyDollar[1].subresult, yyDollar[4].subresult)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:772
		{
			yyVAL.subresult = algebra.NewIntersect(yyDollar[1].subresult, yyDollar[3].subresult)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:777
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyDollar[1].subresult, yyDollar[4].subresult)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:782
		{
			yyVAL.subresult = algebra.NewExcept(yyDollar[1].subresult, yyDollar[3].subresult)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:787
		{
			yyVAL.subresult = algebra.NewExceptAll(yyDollar[1].subresult, yyDollar[4].subresult)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:792
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewUnion(left_term, yyDollar[3].subresult)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:798
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewUnionAll(left_term, yyDollar[4].subresult)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:804
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewIntersect(left_term, yyDollar[3].subresult)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:810
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewIntersectAll(left_term, yyDollar[4].subresult)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:816
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewExcept(left_term, yyDollar[3].subresult)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:822
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewExceptAll(left_term, yyDollar[4].subresult)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:830
		{
			yyVAL.subresult = yyDollar[1].subselect
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:835
		{
			yyVAL.subresult = algebra.NewSelectTerm(yyDollar[1].subquery.Select())
		}
	case 84:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:848
		{
			yyVAL.subselect = algebra.NewSubselect(yyDollar[1].bindings, yyDollar[2].fromTerm, yyDollar[3].bindings, yyDollar[4].expr, yyDollar[5].group, yyDollar[6].windowTerms, yyDollar[7].projection)
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:855
		{
			yyVAL.subselect = algebra.NewSubselect(yyDollar[1].bindings, yyDollar[3].fromTerm, yyDollar[4].bindings, yyDollar[5].expr, yyDollar[6].group, yyDollar[7].windowTerms, yyDollar[2].projection)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:870
		{
			yyVAL.projection = yyDollar[2].projection
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:877
		{
			yyVAL.projection = algebra.NewProjection(yyDollar[1].b, yyDollar[2].resultTerms)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:882
		{
			yyVAL.projection = algebra.NewRawProjection(yyDollar[1].b, yyDollar[3].expr, yyDollar[4].s)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:889
		{
			yyVAL.b = false
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:892
		{
			yyVAL.b = false
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:895
		{
			yyVAL.b = true
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:908
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyDollar[1].resultTerm}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:913
		{
			yyVAL.resultTerms = append(yyDollar[1].resultTerms, yyDollar[3].resultTerm)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:920
		{
			yyVAL.resultTerm = algebra.NewResultTerm(expression.SELF, true, "")
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:925
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyDollar[1].expr, true, "")
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:930
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyDollar[1].expr, false, yyDollar[2].s)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:937
		{
			yyVAL.s = ""
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:948
		{
			yyVAL.s = yyDollar[2].s
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:966
		{
			yyVAL.fromTerm = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:975
		{
			yyVAL.fromTerm = yyDollar[2].fromTerm
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:982
		{
			if yyDollar[1].simpleFromTerm.JoinHint() != algebra.JOIN_HINT_NONE {
				yylex.Error(fmt.Sprintf("Join hint (USE HASH or USE NL) cannot be specified on the first from term %s", yyDollar[1].simpleFromTerm.Alias()))
			}
			yyVAL.fromTerm = yyDollar[1].simpleFromTerm
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:990
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("JOIN must be done on a keyspace.")
			} else {
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewJoin(yyDollar[1].fromTerm, yyDollar[2].b, ksterm)
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1001
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("JOIN must be done on a keyspace.")
			} else {
				ksterm.SetIndexJoinNest()
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewIndexJoin(yyDollar[1].fromTerm, yyDollar[2].b, ksterm, yyDollar[7].s)
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1013
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("NEST must be done on a keyspace.")
			} else {
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewNest(yyDollar[1].fromTerm, yyDollar[2].b, ksterm)
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1024
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("NEST must be done on a keyspace.")
			} else {
				ksterm.SetIndexJoinNest()
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewIndexNest(yyDollar[1].fromTerm, yyDollar[2].b, ksterm, yyDollar[7].s)
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1036
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyDollar[1].fromTerm, yyDollar[2].b, yyDollar[4].expr, yyDollar[5].s)
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1041
		{
			yyDollar[4].simpleFromTerm.SetAnsiJoin()
			yyVAL.fromTerm = algebra.NewAnsiJoin(yyDollar[1].fromTerm, yyDollar[2].b, yyDollar[4].simpleFromTerm, yyDollar[6].expr)
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1047
		{
			yyDollar[4].simpleFromTerm.SetAnsiNest()
			yyVAL.fromTerm = algebra.NewAnsiNest(yyDollar[1].fromTerm, yyDollar[2].b, yyDollar[4].simpleFromTerm, yyDollar[6].expr)
		}
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1053
		{
			yyDollar[1].simpleFromTerm.SetAnsiJoin()
			yyVAL.fromTerm = algebra.NewAnsiRightJoin(yyDollar[1].simpleFromTerm, yyDollar[5].simpleFromTerm, yyDollar[7].expr)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1061
		{
			yyVAL.simpleFromTerm = yyDollar[1].keyspaceTerm
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1066
		{
			switch other := yyDollar[1].expr.(type) {
			case *algebra.Subquery:
				if yyDollar[2].s == "" {
					yylex.Error("Subquery in FROM clause must have an alias.")
				}
				if yyDollar[3].use.Keys() != nil || yyDollar[3].use.Indexes() != nil {
					yylex.Error("FROM Subquery cannot have USE KEYS or USE INDEX.")
				}
				yyVAL.simpleFromTerm = algebra.NewSubqueryTerm(other.Select(), yyDollar[2].s, yyDollar[3].use.JoinHint())
			case *expression.Identifier:
				ksterm := algebra.NewKeyspaceTermFromPath(algebra.NewPathWithContext(other.Alias(), yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext()),
					yyDollar[2].s, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes())
				yyVAL.simpleFromTerm = algebra.NewExpressionTerm(other, yyDollar[2].s, ksterm, other.Parenthesis() == false, yyDollar[3].use.JoinHint())
			default:
				if yyDollar[3].use.Keys() != nil || yyDollar[3].use.Indexes() != nil {
					yylex.Error("FROM Expression cannot have USE KEYS or USE INDEX.")
				}
				yyVAL.simpleFromTerm = algebra.NewExpressionTerm(other, yyDollar[2].s, nil, false, yyDollar[3].use.JoinHint())
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1097
		{
			ksterm := algebra.NewKeyspaceTermFromPath(yyDollar[1].keyspacePath, yyDollar[2].s, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes())
			if yyDollar[3].use.JoinHint() != algebra.JOIN_HINT_NONE {
				ksterm.SetJoinHint(yyDollar[3].use.JoinHint())
			}
			yyVAL.keyspaceTerm = ksterm
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1108
		{
			yyVAL.keyspacePath = algebra.NewPathShort(yyDollar[1].s, yyDollar[2].s)
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1113
		{
			yyVAL.keyspacePath = algebra.NewPathLong(yyDollar[1].s, yyDollar[2].s, yyDollar[4].s, yyDollar[6].s)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1125
		{
			yyVAL.s = "#system"
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1132
		{
			yyVAL.s = yyDollar[1].s
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1151
		{
			yyVAL.use = algebra.EMPTY_USE
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1156
		{
			yyVAL.use = yyDollar[2].use
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1169
		{
			yyDollar[1].use.SetJoinHint(yyDollar[2].use.JoinHint())
			yyVAL.use = yyDollar[1].use
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1175
		{
			yyDollar[1].use.SetIndexes(yyDollar[2].use.Indexes())
			yyVAL.use = yyDollar[1].use
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1181
		{
			yyDollar[1].use.SetJoinHint(yyDollar[2].use.JoinHint())
			yyVAL.use = yyDollar[1].use
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1187
		{
			yyDollar[1].use.SetKeys(yyDollar[2].use.Keys())
			yyVAL.use = yyDollar[1].use
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1195
		{
			yyVAL.use = algebra.NewUse(yyDollar[3].expr, nil, algebra.JOIN_HINT_NONE)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1202
		{
			yyVAL.use = algebra.NewUse(nil, yyDollar[3].indexRefs, algebra.JOIN_HINT_NONE)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1209
		{
			yyVAL.use = algebra.NewUse(nil, nil, yyDollar[3].joinHint)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1214
		{
			yyVAL.use = algebra.NewUse(nil, nil, algebra.USE_NL)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1221
		{
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1229
		{
			yyVAL.indexRefs = algebra.IndexRefs{yyDollar[1].indexRef}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1234
		{
			yyVAL.indexRefs = append(yyDollar[1].indexRefs, yyDollar[3].indexRef)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1241
		{
			yyVAL.indexRef = algebra.NewIndexRef(yyDollar[1].s, yyDollar[2].indexType)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1247
		{
			yyVAL.joinHint = algebra.USE_HASH_BUILD
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1252
		{
			yyVAL.joinHint = algebra.USE_HASH_PROBE
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1259
		{
			if yyDollar[1].use.JoinHint() != algebra.JOIN_HINT_NONE {
				yylex.Error("Keyspace reference cannot have join hint (USE HASH or USE NL) in DELETE or UPDATE statement")
			}
			yyVAL.use = yyDollar[1].use
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1269
		{
			yyVAL.b = false
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1274
		{
			yyVAL.b = false
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1279
		{
			yyVAL.b = true
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1292
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1299
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1313
		{
			yyVAL.bindings = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1322
		{
			yyVAL.bindings = yyDollar[2].bindings
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1329
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1334
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1341
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1354
		{
			yyVAL.bindings = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1357
		{
			yyVAL.bindings = yyDollar[2].bindings
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1364
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1369
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1380
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
			yyVAL.binding.SetStatic(true)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1395
		{
			yyVAL.expr = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1404
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1418
		{
			yyVAL.group = nil
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1427
		{
			yyVAL.group = algebra.NewGroup(yyDollar[3].groupTerms, yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1432
		{
			yyVAL.group = algebra.NewGroup(nil, yyDollar[1].bindings, nil)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1439
		{
			yyVAL.groupTerms = algebra.GroupTerms{yyDollar[1].groupTerm}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1444
		{
			yyVAL.groupTerms = append(yyDollar[1].groupTerms, yyDollar[3].groupTerm)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1451
		{
			yyVAL.groupTerm = algebra.NewGroupTerm(yyDollar[1].expr, yyDollar[2].s)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1458
		{
			yyVAL.bindings = nil
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1467
		{
			yyVAL.bindings = yyDollar[2].bindings
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1474
		{
			yyVAL.expr = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1483
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1497
		{
			yyVAL.order = nil
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1506
		{
			yyVAL.order = algebra.NewOrder(yyDollar[3].sortTerms)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1513
		{
			yyVAL.sortTerms = algebra.SortTerms{yyDollar[1].sortTerm}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1518
		{
			yyVAL.sortTerms = append(yyDollar[1].sortTerms, yyDollar[3].sortTerm)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1525
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyDollar[1].expr, yyDollar[2].b, algebra.NewOrderNullsPos(yyDollar[2].b, yyDollar[3].u32))
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1532
		{
			yyVAL.b = false
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1541
		{
			yyVAL.b = false
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1546
		{
			yyVAL.b = true
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1553
		{
			yyVAL.u32 = algebra.NewOrderNulls(true, false, false)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1558
		{
			yyVAL.u32 = algebra.NewOrderNulls(false, yyDollar[1].b, yyDollar[2].b)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1564
		{
			yyVAL.b = false
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1566
		{
			yyVAL.b = true
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1570
		{
			yyVAL.b = true
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1581
		{
			yyVAL.expr = nil
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1590
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1604
		{
			yyVAL.expr = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1613
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1627
		{
			yyVAL.statement = algebra.NewInsertValues(yyDollar[3].keyspaceRef, yyDollar[5].pairs, yyDollar[6].projection)
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:1632
		{
			yyVAL.statement = algebra.NewInsertSelect(yyDollar[3].keyspaceRef, yyDollar[5].pair.Key(), yyDollar[5].pair.Value(), yyDollar[5].pair.Options(), yyDollar[7].fullselect, yyDollar[8].projection)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1639
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefWithContext(yyDollar[1].s, yyDollar[2].s, yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1644
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(yyDollar[1].keyspacePath, yyDollar[2].s)
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1649
		{
			path := algebra.NewPathLong(yylex.(*lexer).Namespace(), yyDollar[1].s, yyDollar[3].s, yyDollar[5].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, yyDollar[6].s)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1671
		{
			yyVAL.pairs = append(yyDollar[1].pairs, yyDollar[3].pairs...)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1678
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[2].pair}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1683
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[2].pair}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1692
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[1].pair}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1697
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[1].pair}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1704
		{
			yyVAL.pair = algebra.NewPair(yyDollar[2].expr, yyDollar[4].expr, nil)
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1711
		{
			yyVAL.pair = algebra.NewPair(yyDollar[2].expr, yyDollar[4].expr, yyDollar[6].expr)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1719
		{
			yyVAL.projection = nil
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1728
		{
			yyVAL.projection = yyDollar[2].projection
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1735
		{
			yyVAL.projection = algebra.NewProjection(false, yyDollar[1].resultTerms)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1740
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyDollar[2].expr, "")
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1747
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1754
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1761
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1768
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, nil, nil)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1773
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, yyDollar[3].expr, nil)
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1778
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1783
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, nil, yyDollar[3].expr)
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1799
		{
			yyVAL.statement = algebra.NewUpsertValues(yyDollar[3].keyspaceRef, yyDollar[5].pairs, yyDollar[6].projection)
		}
	case 237:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:1804
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyDollar[3].keyspaceRef, yyDollar[5].pair.Key(), yyDollar[5].pair.Value(), yyDollar[5].pair.Options(), yyDollar[7].fullselect, yyDollar[8].projection)
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1818
		{
			yyVAL.statement = algebra.NewDelete(yyDollar[3].keyspaceRef, yyDollar[4].use.Keys(), yyDollar[4].use.Indexes(), yyDollar[5].expr, yyDollar[6].expr, yyDollar[7].projection)
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:1832
		{
			yyVAL.statement = algebra.NewUpdate(yyDollar[2].keyspaceRef, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes(), yyDollar[4].set, yyDollar[5].unset, yyDollar[6].expr, yyDollar[7].expr, yyDollar[8].projection)
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1837
		{
			yyVAL.statement = algebra.NewUpdate(yyDollar[2].keyspaceRef, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes(), yyDollar[4].set, nil, yyDollar[5].expr, yyDollar[6].expr, yyDollar[7].projection)
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1842
		{
			yyVAL.statement = algebra.NewUpdate(yyDollar[2].keyspaceRef, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes(), nil, yyDollar[4].unset, yyDollar[5].expr, yyDollar[6].expr, yyDollar[7].projection)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1849
		{
			yyVAL.set = algebra.NewSet(yyDollar[2].setTerms)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1856
		{
			yyVAL.setTerms = algebra.SetTerms{yyDollar[1].setTerm}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1861
		{
			yyVAL.setTerms = append(yyDollar[1].setTerms, yyDollar[3].setTerm)
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1868
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyDollar[1].path, yyDollar[3].expr, yyDollar[4].updateFor, nil)
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1873
		{
			yyVAL.setTerm = nil
			if yyDollar[1].expr != nil && algebra.IsValidMetaMutatePath(yyDollar[3].path) {
				yyVAL.setTerm = algebra.NewSetTerm(yyDollar[3].path, yyDollar[5].expr, nil, yyDollar[1].expr)
			} else if yyDollar[1].expr != nil {
				yylex.Error(fmt.Sprintf("SET clause has invalid path %s", yyDollar[3].path.String()))
				yylex.(*lexer).Stop()
			}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1886
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyDollar[1].s)
			if ok && strings.ToLower(yyDollar[1].s) == "meta" && len(yyDollar[3].exprs) >= f.MinArgs() && len(yyDollar[3].exprs) <= f.MaxArgs() {
				yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
			} else {
				yylex.Error(fmt.Sprintf("SET clause has invalid path %s", yyDollar[1].s))
				yylex.(*lexer).Stop()
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1901
		{
			yyVAL.updateFor = nil
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1910
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyDollar[1].dimensions, yyDollar[2].expr)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1917
		{
			yyVAL.dimensions = []expression.Bindings{yyDollar[2].bindings}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1922
		{
			dims := make([]expression.Bindings, 0, 1+len(yyDollar[1].dimensions))
			dims = append(dims, yyDollar[3].bindings)
			yyVAL.dimensions = append(dims, yyDollar[1].dimensions...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1931
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1936
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1943
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1948
		{
			yyVAL.binding = expression.NewBinding("", yyDollar[1].s, yyDollar[3].expr, true)
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1953
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, false)
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1958
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1969
		{
			yyVAL.expr = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1974
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1981
		{
			yyVAL.unset = algebra.NewUnset(yyDollar[2].unsetTerms)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1988
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyDollar[1].unsetTerm}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1993
		{
			yyVAL.unsetTerms = append(yyDollar[1].unsetTerms, yyDollar[3].unsetTerm)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2000
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyDollar[1].path, yyDollar[2].updateFor)
		}
	case 266:
		yyDollar = yyS[yypt-12 : yypt+1]
//line n1ql.y:2014
		{
			switch other := yyDollar[6].simpleFromTerm.(type) {
			case *algebra.SubqueryTerm:
				source := algebra.NewMergeSourceSubquery(other)
				yyVAL.statement = algebra.NewMerge(yyDollar[3].keyspaceRef, yyDollar[4].use.Indexes(), source, yyDollar[8].b, yyDollar[9].expr, yyDollar[10].mergeActions, yyDollar[11].expr, yyDollar[12].projection)
			case *algebra.ExpressionTerm:
				source := algebra.NewMergeSourceExpression(other)
				yyVAL.statement = algebra.NewMerge(yyDollar[3].keyspaceRef, yyDollar[4].use.Indexes(), source, yyDollar[8].b, yyDollar[9].expr, yyDollar[10].mergeActions, yyDollar[11].expr, yyDollar[12].projection)
			case *algebra.KeyspaceTerm:
				source := algebra.NewMergeSourceFrom(other)
				yyVAL.statement = algebra.NewMerge(yyDollar[3].keyspaceRef, yyDollar[4].use.Indexes(), source, yyDollar[8].b, yyDollar[9].expr, yyDollar[10].mergeActions, yyDollar[11].expr, yyDollar[12].projection)
			default:
				yylex.Error("MERGE source term is UNKNOWN.")
			}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2033
		{
			if yyDollar[1].use.Keys() != nil {
				yylex.Error("Keyspace reference cannot have USE KEYS hint in MERGE statement.")
			} else if yyDollar[1].use.JoinHint() != algebra.JOIN_HINT_NONE {
				yylex.Error("Keyspace reference cannot have join hint (USE HASH or USE NL)in MERGE statement.")
			}
			yyVAL.use = yyDollar[1].use
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2045
		{
			yyVAL.b = false
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2050
		{
			yyVAL.b = true
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2057
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2062
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyDollar[5].mergeUpdate, yyDollar[6].mergeActions.Delete(), yyDollar[6].mergeActions.Insert())
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2067
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyDollar[5].mergeDelete, yyDollar[6].mergeInsert)
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2072
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyDollar[6].mergeInsert)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2079
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2084
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyDollar[5].mergeDelete, yyDollar[6].mergeInsert)
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2089
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyDollar[6].mergeInsert)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2096
		{
			yyVAL.mergeInsert = nil
		}
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2101
		{
			yyVAL.mergeInsert = yyDollar[6].mergeInsert
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2108
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyDollar[1].set, nil, yyDollar[2].expr)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2113
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyDollar[1].set, yyDollar[2].unset, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2118
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyDollar[1].unset, yyDollar[2].expr)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2125
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyDollar[1].expr)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2132
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(nil, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2137
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyDollar[1].pair.Key(), yyDollar[1].pair.Value(), nil, yyDollar[2].expr)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2142
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyDollar[1].pair.Key(), yyDollar[1].pair.Value(), yyDollar[1].pair.Options(), yyDollar[2].expr)
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2147
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyDollar[2].pair.Key(), yyDollar[2].pair.Value(), yyDollar[2].pair.Options(), yyDollar[4].expr)
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2160
		{
			yyVAL.statement = algebra.NewGrantRole(yyDollar[2].ss, nil, yyDollar[4].ss)
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2165
		{
			yyVAL.statement = algebra.NewGrantRole(yyDollar[2].ss, yyDollar[4].keyspaceRefs, yyDollar[6].ss)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2172
		{
			yyVAL.ss = []string{yyDollar[1].s}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2177
		{
			yyVAL.ss = append(yyDollar[1].ss, yyDollar[3].s)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2184
		{
			yyVAL.s = yyDollar[1].s
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2189
		{
			yyVAL.s = "select"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2194
		{
			yyVAL.s = "insert"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2199
		{
			yyVAL.s = "update"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2204
		{
			yyVAL.s = "delete"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2211
		{
			yyVAL.keyspaceRefs = []*algebra.KeyspaceRef{yyDollar[1].keyspaceRef}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2216
		{
			yyVAL.keyspaceRefs = append(yyDollar[1].keyspaceRefs, yyDollar[3].keyspaceRef)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2223
		{
			yyVAL.ss = []string{yyDollar[1].s}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2228
		{
			yyVAL.ss = append(yyDollar[1].ss, yyDollar[3].s)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2235
		{
			yyVAL.s = yyDollar[1].s
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2240
		{
			yyVAL.s = yyDollar[1].s + ":" + yyDollar[3].s
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2252
		{
			yyVAL.statement = algebra.NewRevokeRole(yyDollar[2].ss, nil, yyDollar[4].ss)
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2257
		{
			yyVAL.statement = algebra.NewRevokeRole(yyDollar[2].ss, yyDollar[4].keyspaceRefs, yyDollar[6].ss)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2270
		{
			yyVAL.statement = algebra.NewCreateScope(yyDollar[3].scopeRef)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2283
		{
			yyVAL.statement = algebra.NewDropScope(yyDollar[3].scopeRef)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2296
		{
			yyVAL.statement = algebra.NewCreateCollection(yyDollar[3].keyspaceRef)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2309
		{
			yyVAL.statement = algebra.NewDropCollection(yyDollar[3].keyspaceRef)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2322
		{
			yyVAL.statement = algebra.NewFlushCollection(yyDollar[3].keyspaceRef)
		}
	case 311:
		yyDollar = yyS[yypt-9 : yypt+1]
//line n1ql.y:2341
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyDollar[4].s, yyDollar[6].keyspaceRef, yyDollar[7].partitionTerm, yyDollar[8].indexType, yyDollar[9].val)
		}
	case 312:
		yyDollar = yyS[yypt-12 : yypt+1]
//line n1ql.y:2346
		{
			yyVAL.statement = algebra.NewCreateIndex(yyDollar[3].s, yyDollar[5].keyspaceRef, yyDollar[7].indexKeyTerms, yyDollar[9].partitionTerm, yyDollar[10].expr, yyDollar[11].indexType, yyDollar[12].val)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2353
		{
			yyVAL.s = "#primary"
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2365
		{
			yyVAL.s = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2374
		{
			path := algebra.NewPathShort(yyDollar[1].s, yyDollar[2].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, "")
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2380
		{
			path := algebra.NewPathLong(yylex.(*lexer).Namespace(), yyDollar[1].s, yyDollar[3].s, yyDollar[5].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, "")
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2388
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefWithContext(yyDollar[1].s, "", yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2393
		{
			path := algebra.NewPathLong(yyDollar[1].s, yyDollar[2].s, yyDollar[4].s, yyDollar[6].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, "")
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2401
		{
			path := algebra.NewPathScope(yyDollar[1].s, yyDollar[2].s, yyDollar[4].s)
			yyVAL.scopeRef = algebra.NewScopeRefFromPath(path, "")
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2407
		{
			path := algebra.NewPathScope(yylex.(*lexer).Namespace(), yyDollar[1].s, yyDollar[3].s)
			yyVAL.scopeRef = algebra.NewScopeRefFromPath(path, "")
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2415
		{
			yyVAL.partitionTerm = nil
		}
	case 326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2420
		{
			yyVAL.partitionTerm = algebra.NewIndexPartitionTerm(datastore.HASH_PARTITION, yyDollar[5].exprs)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2427
		{
			yyVAL.indexType = datastore.DEFAULT
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2436
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2441
		{
			yyVAL.indexType = datastore.GSI
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2446
		{
			yyVAL.indexType = datastore.FTS
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2453
		{
			yyVAL.val = nil
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2462
		{
			yyVAL.val = yyDollar[2].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2472
		{
			yyVAL.indexKeyTerms = algebra.IndexKeyTerms{yyDollar[1].indexKeyTerm}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2477
		{
			yyVAL.indexKeyTerms = append(yyDollar[1].indexKeyTerms, yyDollar[3].indexKeyTerm)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2484
		{
			yyVAL.indexKeyTerm = algebra.NewIndexKeyTerm(yyDollar[1].expr, yyDollar[2].u32)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2492
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, false)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2497
		{
			yyVAL.expr = expression.NewAll(yyDollar[3].expr, true)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2502
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, true)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2509
		{
			exp := yyDollar[1].expr
			if exp != nil && (!exp.Indexable() || exp.Value() != nil) {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2526
		{
			yyVAL.expr = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2531
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2538
		{
			yyVAL.u32 = algebra.IK_NONE
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2541
		{
			yyVAL.u32 = yyDollar[1].u32
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2544
		{
			attr, valid := algebra.NewIndexKeyTermAttributes(yyDollar[1].u32, yyDollar[2].u32)
			if !valid {
				yylex.Error("Duplicate or Invalid index key attribute")
			}
			yyVAL.u32 = attr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2556
		{
			yyVAL.u32 = algebra.IK_ASC
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2559
		{
			yyVAL.u32 = algebra.IK_DESC
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2562
		{
			yyVAL.u32 = algebra.IK_MISSING
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2574
		{
			yyVAL.statement = algebra.NewDropIndex(yyDollar[5].keyspaceRef, "#primary", yyDollar[6].indexType)
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2579
		{
			yyVAL.statement = algebra.NewDropIndex(yyDollar[3].keyspaceRef, yyDollar[5].s, yyDollar[6].indexType)
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2584
		{
			yyVAL.statement = algebra.NewDropIndex(yyDollar[5].keyspaceRef, yyDollar[3].s, yyDollar[6].indexType)
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:2597
		{
			yyVAL.statement = algebra.NewAlterIndex(yyDollar[3].keyspaceRef, yyDollar[5].s, yyDollar[6].indexType, yyDollar[7].val)
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:2602
		{
			yyVAL.statement = algebra.NewAlterIndex(yyDollar[5].keyspaceRef, yyDollar[3].s, yyDollar[6].indexType, yyDollar[7].val)
		}
	case 358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2615
		{
			yyVAL.statement = algebra.NewBuildIndexes(yyDollar[4].keyspaceRef, yyDollar[8].indexType, yyDollar[6].exprs...)
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:2628
		{
			if yyDollar[7].functionBody != nil {
				err := yyDollar[7].functionBody.SetVarNames(yyDollar[5].ss)
				if err != nil {
					yylex.Error(err.Error())
				}
			}
			yyVAL.statement = algebra.NewCreateFunction(yyDollar[3].functionName, yyDollar[7].functionBody)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2647
		{
			name, err := functions.Constructor([]string{yyDollar[1].s}, yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.functionName = name
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2658
		{
			name, err := functions.Constructor([]string{yyDollar[1].s, yyDollar[2].s}, yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.functionName = name
		}
	case 364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2667
		{
			name, err := functions.Constructor([]string{yyDollar[1].s, yyDollar[2].s, yyDollar[4].s, yyDollar[6].s}, yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.functionName = name
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2678
		{
			yyVAL.ss = nil
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2687
		{
			yyVAL.ss = []string{yyDollar[1].s}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2692
		{
			yyVAL.ss = append(yyDollar[1].ss, string(yyDollar[3].s))
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2699
		{
			body, err := inline.NewInlineBody(yyDollar[2].expr)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2709
		{
			body, err := inline.NewInlineBody(yyDollar[4].expr)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2719
		{
			body, err := golang.NewGolangBody(yyDollar[5].s, yyDollar[7].s)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2729
		{
			body, err := javascript.NewJavascriptBody(yyDollar[5].s, yyDollar[7].s)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2747
		{
			yyVAL.statement = algebra.NewDropFunction(yyDollar[3].functionName)
		}
	case 374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2760
		{
			yyVAL.statement = algebra.NewExecuteFunction(yyDollar[3].functionName, yyDollar[5].exprs)
		}
	case 375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2773
		{
			yyVAL.statement = algebra.NewUpdateStatistics(yyDollar[4].keyspaceRef, yyDollar[6].exprs, yyDollar[8].val)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2786
		{
			yyVAL.exprs = expression.Expressions{yyDollar[1].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2791
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2808
		{
			yyVAL.path = expression.NewIdentifier(yyDollar[1].s)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2813
		{
			yyVAL.path = expression.NewField(yyDollar[1].path, expression.NewFieldName(yyDollar[3].s, false))
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2818
		{
			field := expression.NewField(yyDollar[1].path, expression.NewFieldName(yyDollar[3].s, true))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2825
		{
			yyVAL.path = expression.NewField(yyDollar[1].path, yyDollar[4].expr)
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2830
		{
			field := expression.NewField(yyDollar[1].path, yyDollar[4].expr)
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2837
		{
			yyVAL.path = expression.NewElement(yyDollar[1].path, yyDollar[3].expr)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2854
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, false))
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2859
		{
			field := expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, true))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2866
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2871
		{
			field := expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2878
		{
			yyVAL.expr = expression.NewElement(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2883
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2888
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2893
		{
			yyVAL.expr = expression.NewArrayStar(yyDollar[1].expr)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2899
		{
			yyVAL.expr = expression.NewAdd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2904
		{
			yyVAL.expr = expression.NewSub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2909
		{
			yyVAL.expr = expression.NewMult(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2914
		{
			yyVAL.expr = expression.NewDiv(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2919
		{
			yyVAL.expr = expression.NewMod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2925
		{
			yyVAL.expr = expression.NewConcat(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2931
		{
			yyVAL.expr = expression.NewAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2936
		{
			yyVAL.expr = expression.NewOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2941
		{
			yyVAL.expr = expression.NewNot(yyDollar[2].expr)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2947
		{
			yyVAL.expr = expression.NewEq(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2952
		{
			yyVAL.expr = expression.NewEq(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2957
		{
			yyVAL.expr = expression.NewNE(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2962
		{
			yyVAL.expr = expression.NewLT(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2967
		{
			yyVAL.expr = expression.NewGT(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2972
		{
			yyVAL.expr = expression.NewLE(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2977
		{
			yyVAL.expr = expression.NewGE(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2982
		{
			yyVAL.expr = expression.NewBetween(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2987
		{
			yyVAL.expr = expression.NewNotBetween(yyDollar[1].expr, yyDollar[4].expr, yyDollar[6].expr)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2992
		{
			yyVAL.expr = expression.NewLike(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2997
		{
			yyVAL.expr = expression.NewNotLike(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3002
		{
			yyVAL.expr = expression.NewIn(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3007
		{
			yyVAL.expr = expression.NewNotIn(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3012
		{
			yyVAL.expr = expression.NewWithin(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3017
		{
			yyVAL.expr = expression.NewNotWithin(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3022
		{
			yyVAL.expr = expression.NewIsNull(yyDollar[1].expr)
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3027
		{
			yyVAL.expr = expression.NewIsNotNull(yyDollar[1].expr)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3032
		{
			yyVAL.expr = expression.NewIsMissing(yyDollar[1].expr)
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3037
		{
			yyVAL.expr = expression.NewIsNotMissing(yyDollar[1].expr)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3042
		{
			yyVAL.expr = expression.NewIsValued(yyDollar[1].expr)
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3047
		{
			yyVAL.expr = expression.NewIsNotValued(yyDollar[1].expr)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3052
		{
			yyVAL.expr = expression.NewExists(yyDollar[2].expr)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3072
		{
			yyVAL.expr = expression.NewIdentifier(yyDollar[1].s)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3078
		{
			ident := expression.NewIdentifier(yyDollar[1].s)
			ident.SetCaseInsensitive(true)
			yyVAL.expr = ident
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3086
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3098
		{
			yyVAL.expr = expression.NewNeg(yyDollar[2].expr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3113
		{
			if yylex.(*lexer).parsingStatement() {
				yylex.Error("syntax error")
			}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3119
		{
			yyVAL.expr = expression.NewCover(yyDollar[4].expr)
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3129
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, false))
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3134
		{
			field := expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, true))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3141
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3146
		{
			field := expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3153
		{
			yyVAL.expr = expression.NewElement(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3158
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3163
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3168
		{
			yyVAL.expr = expression.NewArrayStar(yyDollar[1].expr)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3174
		{
			yyVAL.expr = expression.NewAdd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3179
		{
			yyVAL.expr = expression.NewSub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3184
		{
			yyVAL.expr = expression.NewMult(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3189
		{
			yyVAL.expr = expression.NewDiv(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3194
		{
			yyVAL.expr = expression.NewMod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3200
		{
			yyVAL.expr = expression.NewConcat(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3214
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3219
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3224
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3229
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3234
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyDollar[1].f))
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3239
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyDollar[1].n))
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3244
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyDollar[1].s))
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3264
		{
			yyVAL.expr = expression.NewObjectConstruct(algebra.MapPairs(yyDollar[2].pairs))
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3271
		{
			yyVAL.pairs = nil
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3280
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[1].pair}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3285
		{
			yyVAL.pairs = append(yyDollar[1].pairs, yyDollar[3].pair)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3292
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, yyDollar[3].expr, nil)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3297
		{
			name := yyDollar[1].expr.Alias()
			if name == "" {
				yylex.Error(fmt.Sprintf("Object member missing name or value: %s", yyDollar[1].expr.String()))
			}

			yyVAL.pair = algebra.NewPair(expression.NewConstant(name), yyDollar[1].expr, nil)
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3309
		{
			yyVAL.expr = expression.NewArrayConstruct(yyDollar[2].exprs...)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3316
		{
			yyVAL.exprs = nil
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3325
		{
			yyVAL.exprs = expression.Expressions{yyDollar[1].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3330
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3343
		{
			yyVAL.expr = algebra.NewNamedParameter(yyDollar[1].s)
			yylex.(*lexer).countParam()
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3349
		{
			p := int(yyDollar[1].n)
			if yyDollar[1].n > int64(p) {
				yylex.Error(fmt.Sprintf("Positional parameter out of range: $%v.", yyDollar[1].n))
			}

			yyVAL.expr = algebra.NewPositionalParameter(p)
			yylex.(*lexer).countParam()
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3360
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3375
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3388
		{
			yyVAL.expr = expression.NewSimpleCase(yyDollar[1].expr, yyDollar[2].whenTerms, yyDollar[3].expr)
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3395
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyDollar[2].expr, yyDollar[4].expr}}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3400
		{
			yyVAL.whenTerms = append(yyDollar[1].whenTerms, &expression.WhenTerm{yyDollar[3].expr, yyDollar[5].expr})
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3408
		{
			yyVAL.expr = expression.NewSearchedCase(yyDollar[1].whenTerms, yyDollar[2].expr)
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3415
		{
			yyVAL.expr = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3420
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:3437
		{
			yyVAL.expr = nil
			fname := "nth_value"
			f, ok := algebra.GetAggregate(fname, false, false, (yyDollar[7].windowTerm != nil))
			if ok {
				if len(yyDollar[3].exprs) < f.MinArgs() || len(yyDollar[3].exprs) > f.MaxArgs() {
					if f.MinArgs() == f.MaxArgs() {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be %d.", fname, f.MaxArgs()))
					} else {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be between %d and %d.", fname, f.MinArgs(), f.MaxArgs()))
					}
				} else {
					yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
					if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
						a.SetAggregateModifiers(yyDollar[5].u32|yyDollar[6].u32, nil, yyDollar[7].windowTerm)
					}
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", fname))
			}
		}
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:3460
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyDollar[1].s)
			if !ok {
				f, ok = search.GetSearchFunction(yyDollar[1].s)
			}
			if !ok || yyDollar[7].windowTerm != nil {
				f, ok = algebra.GetAggregate(yyDollar[1].s, false, (yyDollar[5].expr != nil), (yyDollar[7].windowTerm != nil))
			}

			if ok {
				if (yyDollar[6].u32 == algebra.AGGREGATE_RESPECTNULLS && !algebra.AggregateHasProperty(yyDollar[1].s, algebra.AGGREGATE_WINDOW_RESPECTNULLS)) ||
					(yyDollar[6].u32 == algebra.AGGREGATE_IGNORENULLS && !algebra.AggregateHasProperty(yyDollar[1].s, algebra.AGGREGATE_WINDOW_IGNORENULLS)) {
					yylex.Error(fmt.Sprintf("RESPECT|IGNORE NULLS syntax is not valid for function %s.", yyDollar[1].s))
				} else if yyDollar[5].expr != nil && !algebra.AggregateHasProperty(yyDollar[1].s, algebra.AGGREGATE_ALLOWS_FILTER) {
					yylex.Error(fmt.Sprintf("FILTER caluse syntax is not valid for function %s.", yyDollar[1].s))
				} else if len(yyDollar[3].exprs) < f.MinArgs() || len(yyDollar[3].exprs) > f.MaxArgs() {
					if f.MinArgs() == f.MaxArgs() {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be %d.", yyDollar[1].s, f.MaxArgs()))
					} else {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be between %d and %d.", yyDollar[1].s, f.MinArgs(), f.MaxArgs()))
					}
				} else {
					yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
					if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
						a.SetAggregateModifiers(yyDollar[6].u32, yyDollar[5].expr, yyDollar[7].windowTerm)
					}
				}
			} else {
				f = nil
				if yyDollar[5].expr == nil && yyDollar[6].u32 == uint32(0) && yyDollar[7].windowTerm == nil {
					name, err := functions.Constructor([]string{yyDollar[1].s}, yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
					if err != nil {
						yylex.Error(err.Error())
						yylex.(*lexer).Stop()
					}
					f = expression.GetUserDefinedFunction(name)
				}

				if f != nil {
					yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
				} else {
					yylex.Error(fmt.Sprintf("Invalid function %s.", yyDollar[1].s))
					yylex.(*lexer).Stop()
				}
			}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:3509
		{
			agg, ok := algebra.GetAggregate(yyDollar[1].s, yyDollar[3].u32 == algebra.AGGREGATE_DISTINCT, (yyDollar[6].expr != nil), (yyDollar[7].windowTerm != nil))
			if ok {
				yyVAL.expr = agg.Constructor()(yyDollar[4].expr)
				if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
					a.SetAggregateModifiers(yyDollar[3].u32, yyDollar[6].expr, yyDollar[7].windowTerm)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyDollar[1].s))
			}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3522
		{
			if strings.ToLower(yyDollar[1].s) != "count" {
				yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyDollar[1].s))
			} else {
				agg, ok := algebra.GetAggregate(yyDollar[1].s, false, (yyDollar[5].expr != nil), (yyDollar[6].windowTerm != nil))
				if ok {
					yyVAL.expr = agg.Constructor()(nil)
					if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
						a.SetAggregateModifiers(uint32(0), yyDollar[5].expr, yyDollar[6].windowTerm)
					}
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyDollar[1].s))
				}
			}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3539
		{
			f := expression.GetUserDefinedFunction(yyDollar[1].functionName)
			if f != nil {
				yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %v", yyDollar[1].functionName))
				yylex.(*lexer).Stop()
			}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3568
		{
			yyVAL.expr = expression.NewAny(yyDollar[2].bindings, yyDollar[3].expr)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3573
		{
			yyVAL.expr = expression.NewAny(yyDollar[2].bindings, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3578
		{
			yyVAL.expr = expression.NewEvery(yyDollar[2].bindings, yyDollar[3].expr)
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3583
		{
			yyVAL.expr = expression.NewAnyEvery(yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3588
		{
			yyVAL.expr = expression.NewAnyEvery(yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3595
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3600
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3607
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3612
		{
			yyVAL.binding = expression.NewBinding("", yyDollar[1].s, yyDollar[3].expr, true)
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3617
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, false)
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3622
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, true)
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3629
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3636
		{
			yyVAL.expr = expression.NewArray(yyDollar[2].expr, yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3641
		{
			yyVAL.expr = expression.NewFirst(yyDollar[2].expr, yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:3646
		{
			yyVAL.expr = expression.NewObject(yyDollar[2].expr, yyDollar[4].expr, yyDollar[6].bindings, yyDollar[7].expr)
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3660
		{
			switch other := yyDollar[2].expr.(type) {
			case *expression.Identifier:
				other.SetParenthesis(true)
				yyVAL.expr = other
			default:
				yyVAL.expr = other
			}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3671
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3676
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3683
		{
			if yylex.(*lexer).parsingStatement() {
				yylex.Error("syntax error")
			}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3689
		{
			yyVAL.subquery = algebra.NewSubquery(yyDollar[4].fullselect)
			yyVAL.subquery.Select().SetCorrelated()
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3695
		{
			yyVAL.subquery = algebra.NewSubquery(yyDollar[2].fullselect)
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3714
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, false)
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3719
		{
			yyVAL.expr = expression.NewAll(yyDollar[3].expr, true)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3724
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, true)
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3737
		{
			yyVAL.windowTerms = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3740
		{
			yyVAL.windowTerms = yyDollar[2].windowTerms
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3747
		{
			yyVAL.windowTerms = algebra.WindowTerms{yyDollar[1].windowTerm}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3752
		{
			yyVAL.windowTerms = append(yyDollar[1].windowTerms, yyDollar[3].windowTerm)
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3759
		{
			yyVAL.windowTerm = yyDollar[3].windowTerm
			yyVAL.windowTerm.SetAsWindowName(yyDollar[1].s)
		}
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3767
		{
			yyVAL.windowTerm = algebra.NewWindowTerm(yyDollar[2].s, yyDollar[3].exprs, yyDollar[4].order, yyDollar[5].windowFrame, false)
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3774
		{
			yyVAL.s = ""
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3781
		{
			yyVAL.exprs = nil
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3784
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3789
		{
			yyVAL.windowFrame = nil
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3794
		{
			yyVAL.windowFrame = algebra.NewWindowFrame(yyDollar[1].u32|yyDollar[3].u32, yyDollar[2].windowFrameExtents)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3801
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_ROWS
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3806
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_RANGE
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3811
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_GROUPS
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3818
		{
			yyVAL.u32 = uint32(0)
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3823
		{
			yyVAL.u32 = uint32(0)
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3828
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_EXCLUDE_CURRENT_ROW
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3833
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_EXCLUDE_TIES
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3838
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_EXCLUDE_GROUP
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3845
		{
			yyVAL.windowFrameExtents = algebra.WindowFrameExtents{yyDollar[1].windowFrameExtent}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3850
		{
			yyVAL.windowFrameExtents = algebra.WindowFrameExtents{yyDollar[2].windowFrameExtent, yyDollar[4].windowFrameExtent}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3857
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(nil, algebra.WINDOW_FRAME_UNBOUNDED_PRECEDING)
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3862
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(nil, algebra.WINDOW_FRAME_UNBOUNDED_FOLLOWING)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3867
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(nil, algebra.WINDOW_FRAME_CURRENT_ROW)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3872
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(yyDollar[1].expr, yyDollar[2].u32)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3879
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_VALUE_PRECEDING
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3884
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_VALUE_FOLLOWING
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3891
		{
			yyVAL.u32 = uint32(0)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3894
		{
			yyVAL.u32 = yyDollar[1].u32
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3899
		{
			yyVAL.u32 = algebra.AGGREGATE_RESPECTNULLS
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3902
		{
			yyVAL.u32 = algebra.AGGREGATE_IGNORENULLS
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3907
		{
			yyVAL.u32 = uint32(0)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3910
		{
			if yyDollar[2].b {
				yyVAL.u32 = algebra.AGGREGATE_FROMLAST
			} else {
				yyVAL.u32 = algebra.AGGREGATE_FROMFIRST
			}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3921
		{
			yyVAL.u32 = uint32(0)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3926
		{
			yyVAL.u32 = algebra.AGGREGATE_DISTINCT
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3933
		{
			yyVAL.expr = nil
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3936
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3941
		{
			yyVAL.windowTerm = nil
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3944
		{
			yyVAL.windowTerm = yyDollar[1].windowTerm
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3949
		{
			yyVAL.windowTerm = algebra.NewWindowTerm(yyDollar[2].s, nil, nil, nil, true)
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3954
		{
			yyVAL.windowTerm = yyDollar[2].windowTerm
		}
	}
	goto yystack /* stack new state and value */
}
