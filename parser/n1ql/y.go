// Code generated by goyacc n1ql.y. DO NOT EDIT.

//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2

import "fmt"
import "strings"
import "github.com/couchbase/clog"
import "github.com/couchbase/query/algebra"
import "github.com/couchbase/query/datastore"
import "github.com/couchbase/query/expression"
import "github.com/couchbase/query/expression/search"
import "github.com/couchbase/query/functions"
import "github.com/couchbase/query/functions/inline"
import "github.com/couchbase/query/functions/golang"
import "github.com/couchbase/query/functions/javascript"
import "github.com/couchbase/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:22
type yySymType struct {
	yys int
	s   string
	u32 uint32
	n   int64
	f   float64
	b   bool

	ss         []string
	expr       expression.Expression
	exprs      expression.Expressions
	subquery   *algebra.Subquery
	whenTerm   *expression.WhenTerm
	whenTerms  expression.WhenTerms
	binding    *expression.Binding
	bindings   expression.Bindings
	dimensions []expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect         *algebra.Select
	subresult          algebra.Subresult
	selectTerm         *algebra.SelectTerm
	subselect          *algebra.Subselect
	fromTerm           algebra.FromTerm
	simpleFromTerm     algebra.SimpleFromTerm
	keyspaceTerm       *algebra.KeyspaceTerm
	keyspacePath       *algebra.Path
	use                *algebra.Use
	joinHint           algebra.JoinHint
	indexRefs          algebra.IndexRefs
	indexRef           *algebra.IndexRef
	subqueryTerm       *algebra.SubqueryTerm
	path               expression.Path
	group              *algebra.Group
	resultTerm         *algebra.ResultTerm
	resultTerms        algebra.ResultTerms
	projection         *algebra.Projection
	order              *algebra.Order
	sortTerm           *algebra.SortTerm
	sortTerms          algebra.SortTerms
	indexKeyTerm       *algebra.IndexKeyTerm
	indexKeyTerms      algebra.IndexKeyTerms
	partitionTerm      *algebra.IndexPartitionTerm
	groupTerm          *algebra.GroupTerm
	groupTerms         algebra.GroupTerms
	windowTerm         *algebra.WindowTerm
	windowTerms        algebra.WindowTerms
	windowFrame        *algebra.WindowFrame
	windowFrameExtents algebra.WindowFrameExtents
	windowFrameExtent  *algebra.WindowFrameExtent

	updStatistics *algebra.UpdateStatistics

	keyspaceRef  *algebra.KeyspaceRef
	keyspaceRefs []*algebra.KeyspaceRef
	scopeRef     *algebra.ScopeRef

	pair         *algebra.Pair
	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	indexType     datastore.IndexType
	inferenceType datastore.InferenceType
	val           value.Value

	functionName functions.FunctionName
	functionBody functions.FunctionBody

	// token offset into the statement
	tokOffset int
}

const _ERROR_ = 57346
const ADVISE = 57347
const ALL = 57348
const ALTER = 57349
const ANALYZE = 57350
const AND = 57351
const ANY = 57352
const ARRAY = 57353
const AS = 57354
const ASC = 57355
const BEGIN = 57356
const BETWEEN = 57357
const BINARY = 57358
const BOOLEAN = 57359
const BREAK = 57360
const BUCKET = 57361
const BUILD = 57362
const BY = 57363
const CALL = 57364
const CASE = 57365
const CAST = 57366
const CLUSTER = 57367
const COLLATE = 57368
const COLLECTION = 57369
const COMMIT = 57370
const CONNECT = 57371
const CONTINUE = 57372
const CORRELATED = 57373
const COVER = 57374
const CREATE = 57375
const CURRENT = 57376
const DATABASE = 57377
const DATASET = 57378
const DATASTORE = 57379
const DECLARE = 57380
const DECREMENT = 57381
const DELETE = 57382
const DERIVED = 57383
const DESC = 57384
const DESCRIBE = 57385
const DISTINCT = 57386
const DO = 57387
const DROP = 57388
const EACH = 57389
const ELEMENT = 57390
const ELSE = 57391
const END = 57392
const EVERY = 57393
const EXCEPT = 57394
const EXCLUDE = 57395
const EXECUTE = 57396
const EXISTS = 57397
const EXPLAIN = 57398
const FALSE = 57399
const FETCH = 57400
const FILTER = 57401
const FIRST = 57402
const FLATTEN = 57403
const FLUSH = 57404
const FOLLOWING = 57405
const FOR = 57406
const FORCE = 57407
const FROM = 57408
const FTS = 57409
const FUNCTION = 57410
const GOLANG = 57411
const GRANT = 57412
const GROUP = 57413
const GROUPS = 57414
const GSI = 57415
const HASH = 57416
const HAVING = 57417
const IF = 57418
const IGNORE = 57419
const ILIKE = 57420
const IN = 57421
const INCLUDE = 57422
const INCREMENT = 57423
const INDEX = 57424
const INFER = 57425
const INLINE = 57426
const INNER = 57427
const INSERT = 57428
const INTERSECT = 57429
const INTO = 57430
const IS = 57431
const JAVASCRIPT = 57432
const JOIN = 57433
const KEY = 57434
const KEYS = 57435
const KEYSPACE = 57436
const KNOWN = 57437
const LANGUAGE = 57438
const LAST = 57439
const LEFT = 57440
const LET = 57441
const LETTING = 57442
const LIKE = 57443
const LIMIT = 57444
const LSM = 57445
const MAP = 57446
const MAPPING = 57447
const MATCHED = 57448
const MATERIALIZED = 57449
const MERGE = 57450
const MINUS = 57451
const MISSING = 57452
const NAMESPACE = 57453
const NAMESPACE_ID = 57454
const NEST = 57455
const NL = 57456
const NO = 57457
const NOT = 57458
const NOT_A_TOKEN = 57459
const NTH_VALUE = 57460
const NULL = 57461
const NULLS = 57462
const NUMBER = 57463
const OBJECT = 57464
const OFFSET = 57465
const ON = 57466
const OPTION = 57467
const OPTIONS = 57468
const OR = 57469
const ORDER = 57470
const OTHERS = 57471
const OUTER = 57472
const OVER = 57473
const PARSE = 57474
const PARTITION = 57475
const PASSWORD = 57476
const PATH = 57477
const POOL = 57478
const PRECEDING = 57479
const PREPARE = 57480
const PRIMARY = 57481
const PRIVATE = 57482
const PRIVILEGE = 57483
const PROBE = 57484
const PROCEDURE = 57485
const PUBLIC = 57486
const RANGE = 57487
const RAW = 57488
const REALM = 57489
const REDUCE = 57490
const RENAME = 57491
const RESPECT = 57492
const RETURN = 57493
const RETURNING = 57494
const REVOKE = 57495
const RIGHT = 57496
const ROLE = 57497
const ROLLBACK = 57498
const ROW = 57499
const ROWS = 57500
const SATISFIES = 57501
const SCHEMA = 57502
const SCOPE = 57503
const SELECT = 57504
const SELF = 57505
const SEMI = 57506
const SET = 57507
const SHOW = 57508
const SOME = 57509
const START = 57510
const STATISTICS = 57511
const STRING = 57512
const SYSTEM = 57513
const THEN = 57514
const TIES = 57515
const TO = 57516
const TRANSACTION = 57517
const TRIGGER = 57518
const TRUE = 57519
const TRUNCATE = 57520
const UNBOUNDED = 57521
const UNDER = 57522
const UNION = 57523
const UNIQUE = 57524
const UNKNOWN = 57525
const UNNEST = 57526
const UNSET = 57527
const UPDATE = 57528
const UPSERT = 57529
const USE = 57530
const USER = 57531
const USING = 57532
const VALIDATE = 57533
const VALUE = 57534
const VALUED = 57535
const VALUES = 57536
const VIA = 57537
const VIEW = 57538
const WHEN = 57539
const WHERE = 57540
const WHILE = 57541
const WINDOW = 57542
const WITH = 57543
const WITHIN = 57544
const WORK = 57545
const XOR = 57546
const INT = 57547
const NUM = 57548
const STR = 57549
const IDENT = 57550
const IDENT_ICASE = 57551
const NAMED_PARAM = 57552
const POSITIONAL_PARAM = 57553
const NEXT_PARAM = 57554
const LPAREN = 57555
const RPAREN = 57556
const LBRACE = 57557
const RBRACE = 57558
const LBRACKET = 57559
const RBRACKET = 57560
const RBRACKET_ICASE = 57561
const COMMA = 57562
const COLON = 57563
const INTERESECT = 57564
const EQ = 57565
const DEQ = 57566
const NE = 57567
const LT = 57568
const GT = 57569
const LE = 57570
const GE = 57571
const CONCAT = 57572
const PLUS = 57573
const STAR = 57574
const DIV = 57575
const MOD = 57576
const UMINUS = 57577
const DOT = 57578
const NSCOLON = 57579

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_ERROR_",
	"ADVISE",
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BUILD",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CORRELATED",
	"COVER",
	"CREATE",
	"CURRENT",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLATTEN",
	"FLUSH",
	"FOLLOWING",
	"FOR",
	"FORCE",
	"FROM",
	"FTS",
	"FUNCTION",
	"GOLANG",
	"GRANT",
	"GROUP",
	"GROUPS",
	"GSI",
	"HASH",
	"HAVING",
	"IF",
	"IGNORE",
	"ILIKE",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INFER",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JAVASCRIPT",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"KNOWN",
	"LANGUAGE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NAMESPACE_ID",
	"NEST",
	"NL",
	"NO",
	"NOT",
	"NOT_A_TOKEN",
	"NTH_VALUE",
	"NULL",
	"NULLS",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"OTHERS",
	"OUTER",
	"OVER",
	"PARSE",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PRECEDING",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROBE",
	"PROCEDURE",
	"PUBLIC",
	"RANGE",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RESPECT",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"ROW",
	"ROWS",
	"SATISFIES",
	"SCHEMA",
	"SCOPE",
	"SELECT",
	"SELF",
	"SEMI",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TIES",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNBOUNDED",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALIDATE",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIA",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"NUM",
	"STR",
	"IDENT",
	"IDENT_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
	"NSCOLON",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	213, 494,
	-2, 430,
	-1, 163,
	236, 127,
	-2, 129,
	-1, 260,
	223, 0,
	224, 0,
	225, 0,
	-2, 404,
	-1, 261,
	223, 0,
	224, 0,
	225, 0,
	-2, 405,
	-1, 262,
	223, 0,
	224, 0,
	225, 0,
	-2, 406,
	-1, 263,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 407,
	-1, 264,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 408,
	-1, 265,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 409,
	-1, 266,
	226, 0,
	227, 0,
	228, 0,
	229, 0,
	-2, 410,
	-1, 273,
	101, 0,
	-2, 413,
	-1, 274,
	79, 0,
	202, 0,
	-2, 415,
	-1, 275,
	79, 0,
	202, 0,
	-2, 417,
	-1, 348,
	236, 129,
	-2, 315,
	-1, 400,
	61, 151,
	91, 151,
	113, 151,
	184, 151,
	-2, 107,
	-1, 426,
	101, 0,
	-2, 414,
	-1, 427,
	79, 0,
	202, 0,
	-2, 416,
	-1, 428,
	79, 0,
	202, 0,
	-2, 418,
	-1, 444,
	93, 143,
	-2, 134,
	-1, 541,
	213, 363,
	-2, 122,
	-1, 582,
	213, 494,
	-2, 380,
	-1, 841,
	92, 143,
	-2, 268,
	-1, 1071,
	92, 143,
	-2, 164,
}

const yyPrivate = 57344

const yyLast = 5369

var yyAct = [...]int{

	221, 9, 1067, 1050, 1028, 1051, 1065, 312, 96, 27,
	445, 711, 25, 438, 607, 150, 437, 959, 220, 720,
	96, 710, 875, 167, 153, 154, 155, 157, 863, 458,
	872, 920, 709, 836, 847, 811, 844, 227, 658, 708,
	610, 297, 748, 615, 810, 701, 879, 695, 878, 778,
	763, 165, 152, 95, 161, 960, 401, 238, 529, 337,
	764, 1070, 650, 543, 542, 147, 580, 757, 605, 219,
	585, 1069, 544, 89, 655, 579, 224, 452, 637, 299,
	333, 532, 604, 102, 531, 753, 381, 293, 476, 466,
	669, 477, 203, 444, 443, 206, 442, 160, 570, 53,
	395, 218, 96, 22, 208, 8, 25, 232, 233, 234,
	480, 243, 226, 217, 360, 180, 292, 279, 145, 479,
	468, 164, 250, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 237, 44,
	273, 274, 275, 114, 418, 307, 842, 95, 158, 121,
	703, 96, 418, 121, 698, 142, 96, 291, 208, 421,
	422, 423, 222, 417, 124, 125, 126, 691, 120, 743,
	691, 417, 120, 891, 715, 123, 689, 692, 625, 623,
	310, 229, 231, 596, 508, 493, 690, 487, 485, 690,
	454, 302, 662, 247, 248, 325, 147, 659, 244, 723,
	267, 147, 249, 301, 651, 383, 362, 896, 1022, 954,
	385, 290, 327, 917, 380, 955, 350, 791, 622, 918,
	420, 313, 313, 313, 303, 868, 817, 382, 380, 620,
	619, 380, 818, 160, 160, 160, 160, 160, 813, 241,
	403, 268, 496, 236, 814, 324, 1025, 1024, 380, 282,
	412, 290, 895, 934, 907, 674, 290, 164, 164, 164,
	164, 164, 313, 313, 313, 661, 382, 721, 351, 356,
	328, 426, 427, 428, 343, 621, 618, 834, 747, 729,
	694, 688, 599, 121, 319, 320, 321, 322, 323, 410,
	377, 326, 801, 802, 404, 375, 127, 122, 124, 125,
	126, 803, 120, 557, 558, 123, 455, 691, 1054, 460,
	461, 682, 559, 247, 248, 1053, 388, 937, 390, 467,
	415, 379, 249, 405, 376, 100, 690, 101, 418, 994,
	897, 330, 335, 386, 568, 851, 330, 335, 993, 347,
	371, 339, 419, 421, 422, 423, 346, 417, 1087, 898,
	314, 316, 387, 498, 1026, 1003, 347, 928, 335, 892,
	502, 816, 503, 373, 313, 109, 326, 746, 313, 862,
	313, 732, 621, 268, 864, 989, 450, 399, 218, 512,
	451, 513, 727, 684, 516, 160, 518, 519, 160, 654,
	366, 368, 370, 500, 526, 431, 499, 109, 606, 497,
	109, 528, 96, 365, 527, 364, 369, 864, 549, 164,
	474, 761, 164, 121, 745, 555, 482, 726, 726, 560,
	313, 693, 313, 645, 313, 520, 435, 122, 124, 125,
	126, 109, 120, 595, 420, 594, 593, 334, 472, 335,
	96, 470, 481, 576, 577, 539, 540, 147, 483, 491,
	367, 575, 457, 471, 850, 510, 469, 436, 394, 305,
	199, 517, 420, 317, 198, 541, 522, 197, 524, 525,
	425, 980, 416, 501, 230, 109, 977, 533, 613, 873,
	608, 228, 608, 930, 315, 147, 612, 300, 109, 489,
	244, 511, 462, 434, 433, 515, 463, 223, 464, 534,
	340, 117, 117, 117, 852, 642, 574, 586, 587, 109,
	582, 551, 245, 583, 453, 225, 117, 478, 335, 737,
	268, 311, 550, 268, 268, 268, 268, 268, 268, 631,
	163, 660, 597, 573, 332, 118, 588, 589, 569, 590,
	663, 591, 418, 117, 675, 1037, 109, 148, 505, 1036,
	506, 117, 507, 611, 1011, 424, 419, 421, 422, 423,
	679, 417, 115, 624, 1010, 626, 204, 118, 866, 617,
	418, 628, 420, 632, 779, 634, 530, 991, 640, 148,
	287, 685, 94, 424, 419, 421, 422, 423, 652, 417,
	644, 677, 440, 699, 1066, 1061, 713, 163, 348, 163,
	467, 118, 115, 361, 646, 530, 686, 687, 159, 649,
	115, 730, 332, 148, 606, 403, 329, 556, 735, 809,
	562, 563, 564, 565, 566, 567, 906, 672, 673, 671,
	750, 731, 982, 345, 335, 647, 335, 614, 335, 223,
	269, 294, 766, 733, 633, 118, 1034, 163, 771, 772,
	372, 1090, 775, 335, 185, 855, 714, 148, 118, 643,
	1089, 854, 1084, 783, 769, 403, 403, 787, 725, 404,
	148, 734, 268, 228, 90, 549, 751, 752, 724, 118,
	418, 160, 795, 245, 838, 1035, 767, 768, 1020, 716,
	800, 148, 804, 424, 419, 421, 422, 423, 405, 417,
	183, 741, 459, 742, 271, 164, 797, 798, 744, 738,
	736, 740, 713, 713, 228, 796, 118, 790, 762, 404,
	404, 785, 786, 760, 549, 246, 270, 832, 148, 239,
	777, 240, 739, 819, 821, 96, 812, 833, 784, 533,
	96, 533, 839, 782, 781, 815, 713, 789, 405, 405,
	837, 359, 651, 840, 439, 983, 822, 1073, 648, 805,
	808, 586, 583, 806, 799, 807, 211, 1043, 1056, 683,
	358, 335, 341, 538, 440, 823, 182, 349, 848, 723,
	147, 876, 705, 828, 853, 147, 824, 831, 830, 403,
	826, 281, 1033, 827, 449, 756, 765, 970, 668, 446,
	184, 210, 1016, 843, 889, 1058, 278, 845, 670, 342,
	1072, 859, 277, 861, 856, 276, 887, 172, 986, 713,
	860, 713, 181, 865, 867, 240, 289, 272, 664, 884,
	170, 281, 903, 882, 877, 881, 870, 838, 908, 909,
	869, 858, 902, 404, 193, 885, 430, 812, 888, 1055,
	665, 924, 913, 905, 894, 429, 449, 945, 901, 910,
	899, 900, 188, 336, 883, 169, 289, 931, 755, 447,
	306, 289, 405, 1042, 880, 1015, 841, 446, 627, 509,
	494, 941, 912, 492, 944, 196, 309, 915, 1014, 280,
	490, 942, 948, 374, 942, 209, 857, 950, 951, 195,
	719, 162, 914, 191, 706, 953, 172, 1057, 1078, 448,
	1075, 932, 957, 938, 308, 1005, 308, 190, 939, 713,
	1076, 667, 447, 397, 1086, 1006, 921, 1085, 1021, 280,
	536, 949, 657, 812, 449, 309, 952, 178, 876, 592,
	758, 956, 958, 537, 979, 978, 981, 1041, 926, 728,
	788, 848, 964, 963, 962, 922, 194, 176, 174, 168,
	976, 659, 448, 925, 972, 971, 173, 992, 1094, 927,
	1093, 1052, 344, 338, 189, 213, 997, 759, 192, 998,
	999, 212, 144, 1000, 1001, 975, 1002, 179, 961, 151,
	572, 636, 713, 995, 239, 175, 187, 284, 943, 940,
	296, 638, 1039, 389, 384, 933, 893, 776, 1007, 774,
	773, 770, 523, 1009, 1032, 1017, 521, 1004, 514, 357,
	408, 1088, 214, 923, 1019, 996, 1023, 916, 304, 780,
	1032, 318, 968, 1008, 1040, 967, 966, 162, 162, 162,
	162, 162, 935, 411, 571, 1059, 235, 1049, 207, 10,
	1048, 331, 166, 1068, 1062, 1064, 331, 295, 409, 99,
	1032, 186, 1063, 666, 1074, 177, 149, 143, 119, 1077,
	137, 1, 1082, 352, 1079, 1080, 1081, 635, 754, 96,
	1027, 208, 913, 25, 1012, 1038, 1083, 1044, 1013, 969,
	871, 718, 1092, 1091, 1068, 1068, 1096, 1097, 919, 1095,
	717, 11, 55, 97, 616, 475, 103, 106, 707, 3,
	846, 990, 749, 702, 488, 1047, 98, 1060, 987, 91,
	283, 911, 697, 696, 95, 584, 578, 109, 54, 74,
	722, 829, 835, 609, 140, 825, 60, 42, 41, 137,
	26, 40, 75, 56, 142, 21, 39, 105, 38, 20,
	14, 24, 12, 78, 70, 69, 107, 68, 112, 35,
	67, 66, 34, 65, 123, 64, 72, 63, 62, 33,
	32, 31, 30, 29, 28, 19, 36, 18, 17, 71,
	16, 15, 58, 7, 6, 5, 4, 2, 600, 162,
	601, 456, 162, 874, 484, 465, 171, 406, 974, 486,
	973, 936, 656, 140, 61, 50, 77, 116, 117, 396,
	700, 495, 23, 142, 88, 76, 704, 441, 108, 473,
	407, 535, 402, 398, 400, 139, 110, 111, 57, 849,
	103, 106, 630, 123, 13, 629, 288, 581, 49, 93,
	92, 52, 202, 91, 201, 200, 51, 929, 432, 73,
	298, 109, 54, 242, 215, 216, 48, 141, 84, 47,
	83, 285, 43, 104, 0, 0, 0, 115, 546, 304,
	0, 105, 121, 79, 113, 24, 0, 78, 0, 0,
	107, 0, 37, 59, 0, 127, 122, 124, 125, 126,
	0, 120, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 81, 80, 82, 45, 46, 85, 86, 87, 94,
	0, 100, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 50,
	77, 0, 117, 0, 0, 0, 23, 0, 88, 76,
	0, 121, 108, 0, 354, 0, 0, 0, 103, 106,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 0,
	120, 91, 0, 0, 103, 106, 545, 0, 0, 109,
	54, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 355, 47, 0, 109, 54, 104, 0, 105,
	0, 115, 0, 24, 0, 78, 0, 79, 107, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 24,
	0, 78, 547, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 80, 82, 45, 46,
	85, 86, 87, 94, 0, 100, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 77, 0,
	117, 0, 548, 0, 23, 0, 88, 76, 0, 0,
	108, 0, 0, 50, 77, 0, 117, 0, 0, 0,
	23, 0, 88, 76, 0, 0, 108, 0, 0, 0,
	0, 0, 103, 106, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 47, 0, 109, 54, 104, 0, 128, 0, 115,
	0, 0, 0, 137, 0, 79, 0, 47, 0, 0,
	0, 104, 0, 105, 0, 115, 0, 24, 0, 78,
	0, 79, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 82, 45, 46, 85, 86,
	87, 94, 0, 100, 0, 101, 0, 0, 0, 81,
	80, 82, 45, 46, 85, 86, 87, 94, 0, 100,
	353, 101, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 50, 77, 0, 117, 0, 548, 142, 23, 0,
	88, 76, 0, 0, 108, 0, 0, 103, 106, 139,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	91, 0, 0, 0, 138, 0, 0, 0, 109, 54,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 105, 104,
	0, 0, 24, 115, 78, 0, 0, 107, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 81, 80, 82,
	45, 46, 85, 86, 87, 94, 0, 100, 0, 101,
	0, 0, 0, 0, 0, 0, 50, 77, 0, 117,
	141, 0, 0, 23, 561, 88, 76, 0, 0, 108,
	0, 0, 363, 0, 0, 121, 0, 1046, 904, 0,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 128, 0, 0, 0, 0,
	0, 137, 0, 142, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 104, 139, 0, 0, 115, 0,
	0, 0, 0, 123, 79, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 81, 80, 82, 45, 46, 85, 86, 87,
	94, 0, 100, 0, 101, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 251,
	0, 0, 0, 128, 0, 0, 0, 139, 0, 137,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 0,
	120, 128, 0, 140, 300, 0, 0, 137, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 141, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 129, 0, 121, 0, 0, 985, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 140, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 139, 0, 137, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 946, 947, 0, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 140,
	120, 128, 0, 0, 0, 0, 0, 137, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 141, 0, 138, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 129, 0, 121,
	0, 0, 0, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 0, 120, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 128, 0, 0, 300, 0,
	0, 137, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 792, 793,
	0, 0, 0, 130, 131, 132, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 140, 120, 128, 0, 0,
	0, 602, 0, 137, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	603, 0, 138, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 121,
	680, 0, 0, 681, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 140, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 141, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 140, 676, 128, 0, 0, 0, 0, 0, 137,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	552, 553, 0, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 140, 120, 128,
	0, 0, 0, 0, 0, 137, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 138, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 121, 413, 0, 0, 414, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 140,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 128, 0, 0, 0, 103, 106, 137,
	0, 139, 1029, 0, 0, 0, 0, 0, 0, 123,
	91, 0, 0, 0, 0, 0, 138, 0, 109, 54,
	0, 1031, 0, 0, 0, 0, 530, 129, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 24, 0, 78, 121, 0, 107, 0, 0,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 128, 0, 0, 0, 0,
	0, 137, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 50, 77, 0, 117,
	138, 0, 141, 23, 0, 88, 76, 0, 0, 108,
	0, 129, 0, 0, 1018, 0, 0, 121, 0, 0,
	0, 0, 0, 130, 131, 132, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 140, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 128,
	47, 0, 0, 0, 104, 137, 0, 139, 115, 0,
	0, 0, 0, 0, 79, 123, 1030, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 988, 0, 129, 0, 0, 141, 0, 0, 0,
	0, 0, 81, 80, 82, 45, 46, 85, 86, 87,
	94, 121, 100, 0, 101, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 140,
	120, 128, 0, 0, 0, 0, 0, 137, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 138, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 965, 121, 0, 0, 0, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 140, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	904, 0, 0, 130, 131, 132, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 140, 120, 128, 0, 0,
	0, 0, 0, 137, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 138, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 121,
	890, 0, 698, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 140, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 886, 0, 0, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 140, 120, 128, 0, 0, 0, 0, 0, 137,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 121, 0, 0, 653, 0,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 128, 0, 0,
	0, 103, 106, 137, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 91, 0, 0, 0, 0, 0,
	138, 0, 109, 54, 0, 1031, 0, 0, 0, 0,
	0, 129, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 24, 0, 78, 121,
	678, 107, 0, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 140, 120, 128,
	0, 0, 0, 0, 0, 137, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	50, 77, 0, 117, 138, 0, 141, 23, 0, 88,
	76, 0, 0, 108, 0, 129, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 140,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 128, 47, 0, 0, 0, 104, 137,
	641, 139, 115, 0, 0, 0, 0, 0, 79, 123,
	1030, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	141, 0, 0, 0, 0, 0, 81, 80, 82, 45,
	46, 85, 86, 87, 94, 121, 100, 0, 101, 0,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 128, 0, 0, 0, 0,
	0, 137, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	138, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 639, 0, 0, 121, 0, 0,
	0, 0, 0, 130, 131, 132, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 140, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 137, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 121, 0, 0, 0, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 140,
	120, 128, 0, 0, 0, 0, 0, 137, 504, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 138, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 121, 0, 0, 392, 0, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 140, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 128, 0, 0, 0, 103,
	106, 137, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 123, 91, 0, 0, 0, 0, 0, 138, 0,
	109, 54, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 24, 0, 78, 121, 0, 107,
	391, 393, 0, 130, 131, 132, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 140, 120, 128, 0, 0,
	0, 0, 0, 137, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 50, 77,
	0, 117, 138, 0, 141, 23, 0, 88, 76, 0,
	0, 108, 0, 129, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 140, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 128, 47, 0, 0, 0, 104, 137, 0, 139,
	115, 0, 0, 0, 0, 0, 79, 123, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 141, 0,
	0, 0, 0, 0, 81, 80, 82, 45, 46, 85,
	86, 87, 94, 121, 100, 0, 101, 794, 0, 130,
	131, 132, 133, 134, 135, 136, 127, 122, 124, 125,
	126, 140, 120, 128, 0, 0, 0, 0, 0, 137,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 138, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 378,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 0, 121,
	0, 0, 0, 0, 0, 130, 131, 132, 133, 134,
	135, 136, 127, 122, 124, 125, 126, 140, 120, 128,
	0, 0, 0, 0, 0, 137, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 205, 128, 0, 138, 0, 141, 0, 137, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 140,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 140, 0, 0, 0, 138, 0, 286, 0,
	0, 0, 142, 0, 0, 0, 0, 129, 0, 0,
	141, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 121, 0, 0, 0, 138,
	0, 130, 131, 132, 133, 134, 135, 136, 127, 122,
	124, 125, 126, 140, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	138, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 130, 131, 132, 133, 134, 135, 136,
	127, 122, 124, 125, 126, 141, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 130, 131, 132, 133,
	134, 135, 136, 127, 122, 124, 125, 126, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 130, 131, 132,
	133, 134, 135, 136, 127, 122, 124, 125, 126, 55,
	120, 0, 0, 103, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 55, 0, 0,
	0, 103, 106, 0, 109, 54, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 26, 0, 0,
	56, 0, 109, 54, 105, 0, 0, 0, 24, 0,
	78, 0, 0, 107, 0, 26, 0, 0, 56, 0,
	0, 0, 105, 0, 0, 0, 24, 0, 78, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 77, 0, 117, 0, 0, 0, 23,
	0, 88, 76, 0, 0, 108, 0, 0, 0, 0,
	50, 77, 0, 117, 0, 0, 0, 23, 0, 88,
	76, 0, 449, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 103, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 91,
	104, 0, 0, 0, 115, 0, 0, 109, 54, 0,
	79, 0, 0, 0, 47, 137, 0, 0, 104, 0,
	712, 0, 115, 56, 0, 0, 0, 105, 79, 0,
	0, 24, 0, 78, 118, 0, 107, 0, 81, 80,
	82, 45, 46, 85, 86, 87, 94, 0, 100, 0,
	101, 0, 118, 0, 0, 0, 81, 80, 82, 45,
	46, 85, 86, 87, 94, 0, 100, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 50, 77, 0, 117, 142,
	0, 0, 23, 0, 88, 76, 0, 0, 108, 103,
	106, 139, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 91, 0, 103, 106, 0, 0, 0, 0,
	109, 54, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 109, 54, 0, 0, 47,
	105, 0, 0, 104, 24, 0, 78, 115, 0, 107,
	0, 0, 0, 79, 0, 105, 0, 0, 0, 24,
	0, 78, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 80, 82, 45, 46, 85, 86, 87, 94,
	0, 100, 0, 101, 0, 0, 0, 0, 50, 77,
	0, 117, 141, 0, 0, 23, 0, 88, 76, 0,
	0, 108, 0, 50, 77, 0, 117, 121, 0, 0,
	23, 0, 88, 76, 0, 0, 108, 103, 106, 0,
	127, 122, 124, 125, 126, 0, 120, 0, 0, 0,
	91, 0, 0, 449, 0, 0, 0, 0, 109, 54,
	0, 0, 47, 0, 0, 0, 104, 0, 0, 0,
	115, 820, 0, 0, 0, 0, 79, 47, 105, 0,
	0, 104, 24, 0, 78, 115, 0, 107, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 80, 82, 45, 46, 85,
	86, 87, 94, 0, 100, 0, 101, 554, 0, 81,
	80, 82, 45, 46, 85, 86, 87, 94, 0, 100,
	0, 101, 0, 0, 0, 0, 50, 77, 0, 117,
	0, 0, 0, 23, 0, 88, 76, 0, 0, 108,
	103, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 103, 106, 0, 0, 0,
	0, 109, 54, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 109, 54, 0, 0,
	47, 105, 0, 0, 104, 24, 0, 78, 115, 156,
	107, 0, 0, 0, 79, 0, 105, 0, 0, 0,
	24, 0, 78, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 80, 82, 45, 46, 85, 86, 87,
	94, 0, 100, 0, 101, 0, 0, 0, 0, 50,
	77, 0, 117, 0, 0, 0, 23, 0, 88, 76,
	0, 0, 108, 0, 50, 77, 0, 117, 0, 0,
	0, 23, 0, 88, 76, 0, 0, 108, 103, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 103, 106, 0, 0, 0, 0, 109,
	54, 0, 0, 47, 0, 0, 91, 104, 0, 0,
	0, 115, 0, 0, 109, 54, 0, 79, 47, 105,
	0, 0, 104, 24, 0, 78, 115, 0, 107, 0,
	0, 0, 79, 0, 105, 0, 151, 205, 24, 0,
	78, 0, 0, 107, 0, 81, 80, 82, 45, 46,
	85, 86, 87, 94, 0, 100, 0, 101, 0, 0,
	81, 80, 82, 45, 46, 85, 86, 87, 94, 0,
	100, 0, 101, 0, 0, 0, 0, 50, 77, 0,
	117, 0, 0, 0, 23, 97, 88, 76, 0, 0,
	108, 0, 50, 77, 0, 117, 0, 0, 98, 23,
	0, 88, 76, 0, 0, 108, 103, 106, 0, 109,
	0, 74, 0, 0, 0, 0, 0, 0, 60, 91,
	0, 103, 106, 0, 75, 0, 0, 109, 54, 0,
	0, 47, 146, 0, 91, 104, 0, 0, 0, 115,
	112, 0, 109, 54, 0, 79, 47, 105, 72, 0,
	104, 24, 0, 78, 115, 0, 107, 0, 0, 0,
	79, 71, 105, 0, 58, 0, 0, 0, 78, 0,
	0, 107, 0, 81, 80, 82, 45, 46, 85, 86,
	87, 94, 0, 100, 0, 101, 61, 0, 81, 80,
	82, 45, 46, 85, 86, 87, 1071, 0, 100, 0,
	101, 0, 0, 0, 0, 50, 77, 0, 117, 0,
	0, 0, 23, 0, 88, 76, 0, 0, 108, 0,
	50, 77, 0, 117, 0, 0, 0, 0, 0, 88,
	76, 73, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 47,
	0, 0, 0, 104, 37, 59, 0, 115, 0, 0,
	0, 0, 0, 79, 47, 0, 0, 0, 104, 118,
	0, 0, 115, 0, 0, 0, 0, 0, 79, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 80, 82, 45, 46, 85, 86, 87, 94,
	0, 100, 0, 101, 0, 0, 81, 80, 82, 45,
	46, 85, 86, 87, 94, 0, 100, 0, 101,
}
var yyPact = [...]int{

	1096, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4070,
	-1000, 900, 5118, -1000, 5008, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5136, 5136, 4895, 5136, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 439, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5136, -1000, -1000, -1000, -1000, -1000, -1000, 778, 878, 870,
	929, 869, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 843, 614, 614, 835, 817, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 254, 251,
	247, 4880, -1000, -1000, 4401, 714, -1000, 899, 893, 995,
	5136, 5136, 289, 506, 465, 273, 5136, 5136, 5136, -1000,
	-1000, -1000, -1000, -1000, -1000, 22, 663, 18, 304, 561,
	105, 1587, 5136, 5136, 5136, 5136, 5136, 5136, 5136, 5136,
	5136, 5136, 5136, 5136, 5136, 5136, 5136, 5151, 625, 5136,
	5136, 5136, 696, 5118, -1000, -1000, 921, 714, 366, 932,
	3998, 431, -1000, 4154, 66, 4070, 5136, 4070, 453, 936,
	475, 475, -45, -1000, 322, -64, 246, 812, 515, 478,
	457, -1000, 1010, 391, 391, 391, 391, 391, -1000, 71,
	-1000, -1000, -1000, -1000, -1000, -1000, 146, 404, 389, 891,
	292, 431, 404, 389, 890, 390, 431, 5136, 1338, 5136,
	969, -1000, -1000, 3914, 554, 5136, 3842, 191, 189, 444,
	400, 334, 390, 769, 389, 108, 70, -1000, 3758, 103,
	8, 4070, -1000, -1000, 46, 953, -1000, 131, -1000, 46,
	952, 46, 3686, 3602, 3530, 245, -1000, 824, 928, 5136,
	1014, -1000, 69, -1000, 1031, -1000, -1000, -1000, -1000, 5136,
	2354, 102, -68, -68, -64, -64, -64, 196, 4154, 4103,
	1124, 1124, 1124, 4550, 4550, 4550, 4550, 463, -1000, 5151,
	5136, 5136, 5136, 1055, 66, 66, -1000, 736, -1000, -1000,
	-1000, -1000, -1000, 286, -1000, -1000, 110, 244, -1000, -1000,
	-1000, 4070, 589, -1000, 795, 389, -1000, -1000, -1000, -1000,
	304, -1000, 306, -1000, -46, 5136, 763, 814, 5136, 5136,
	-1000, 366, -1000, -1000, -1000, 366, -1000, 366, 5136, 243,
	240, 453, 453, -1000, 309, 391, 614, 309, 391, -1000,
	326, -48, -1000, -1000, -1000, 326, -49, -1000, 292, 766,
	-1000, 236, -1000, -1000, 759, -51, 756, 326, -1000, -1000,
	28, 185, 5136, 182, -1000, -1000, 179, -1000, 554, 5136,
	-1000, 5136, 3446, -1000, -1000, -1000, -1000, 366, -1000, 366,
	-1000, 366, -52, 755, 389, -1000, -1000, 5136, 5136, -1000,
	5136, 968, 273, 5136, 273, 5136, 5136, 273, 966, 273,
	962, 273, 273, 5136, 366, 378, -1000, 304, 824, -1000,
	845, 619, -1000, 1882, 475, 322, -1000, 1220, -1000, -1000,
	304, 369, 2282, -1000, 4639, -1000, 5151, 95, 1472, 5151,
	5151, 5151, 5151, 5151, 5151, 325, 1055, 66, 66, -1000,
	-1000, -1000, 5118, 978, 978, -1000, 5136, 407, 378, 302,
	300, -1000, 848, 848, 717, 846, 223, 222, -1000, -1000,
	220, -1000, -53, -1000, 306, 3374, -1000, -1000, -1000, -1000,
	4070, 4070, -1000, -1000, -1000, 62, -1000, 2198, 420, 655,
	420, 655, 378, 447, -1000, 368, 56, -1000, 9, 55,
	-1000, -1000, 56, 152, -57, 306, -58, 306, 754, -1000,
	389, 321, 389, 292, 389, -58, 925, 942, 3290, 942,
	-1000, -1000, 3218, 4070, 5136, -1000, -1000, -1000, 292, 389,
	210, -1000, 4070, 4070, -1000, -1000, 4070, 46, 4070, 4070,
	556, -1000, 46, -1000, 7, 7, 3134, 175, 861, -1000,
	5136, 45, -1000, -31, 378, 737, -1000, 678, 678, 453,
	453, -1000, 35, 5136, -1000, -1000, -1000, -1000, -1000, 2126,
	-1000, -1000, -1000, -1000, -1000, 3062, 353, -1000, -1000, 5136,
	2042, 93, -73, -73, -65, -65, -65, 111, 5151, -1000,
	-1000, -1000, -1000, -1000, 169, 378, 814, 814, 61, -1000,
	-47, -59, -1000, 208, 60, -1000, 90, -1000, -1000, -1000,
	-1000, -1000, 5136, 292, 762, 4526, 289, -62, -1000, 5136,
	780, -1000, -1000, -1000, 47, -1000, 205, 168, 857, 59,
	5136, 47, 157, 814, 5136, -1000, -1000, 5136, 309, 311,
	309, 391, 309, 306, -1000, 306, -67, 389, 201, 153,
	58, -1000, 440, 440, 440, 718, 880, 718, 198, 942,
	665, 5136, 4070, 440, 440, 5136, 961, 5136, 5136, 960,
	959, 5136, 957, 273, -1000, 374, -1000, 1008, -1000, 304,
	4070, 304, 5136, 861, 5136, 5136, 5136, -1000, -1000, -1000,
	-1000, 859, -1000, -1000, 1354, 1882, -15, -1000, -1000, 1970,
	-1000, 3689, -1000, 353, -1000, 814, 627, 627, 302, 5136,
	84, 5136, 300, 5136, 300, -1000, -1000, 555, 273, 4070,
	24, -1000, 440, -1000, 147, -1000, -1000, 12, -1000, -1000,
	-1000, 4767, 5136, 4070, 475, 289, -1000, -1000, 880, -1000,
	-1000, 204, -1000, 1220, -1000, -1000, 5136, 366, 57, 558,
	4070, -1000, 366, 627, 752, 4070, -1000, -1000, 56, -1000,
	56, -1000, -90, 289, 674, 4526, 239, 296, -1000, -1000,
	588, -1000, -1000, 665, -1000, 776, 721, -1000, -1000, -1000,
	665, 378, 665, -1000, -1000, 161, 4070, 367, 367, 11,
	-1000, 4070, 4070, -1000, -1000, 4070, -1000, 7, 569, 271,
	5136, 45, -1000, 4070, 374, 750, 740, 1882, 5136, -1000,
	-1000, -1000, -1000, -1000, -1000, 2906, 627, -1000, -1000, -1000,
	2978, -1000, -1000, 5136, 2822, -50, 145, -1000, 956, 273,
	32, -1000, 128, -1000, 292, -1000, -1000, 368, 4526, -1000,
	5136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35, 5136, 2750, 627, 434, 34, -1000, 5136, 5136, 627,
	-1000, 655, 289, -1000, 440, 1006, -1, -1000, 913, -1000,
	5136, 879, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	143, -1000, -1000, -1000, 275, -1000, 5136, -1000, 440, 955,
	-1000, 33, -1000, 1030, 97, -1000, 1882, -1000, -1000, 935,
	4654, -1000, 934, 4654, -1000, 733, -1000, -1000, -1000, 1814,
	-1000, 5136, -1000, -1000, 32, 273, 5136, 5136, 273, -1000,
	-1000, -1000, -1000, 4070, 5136, -1000, -5, 711, 4070, 4070,
	-1000, 5136, -1000, 850, -1000, 367, 914, 674, 4526, -1000,
	913, -1000, -1000, -1000, 2666, 1024, 1023, 1020, -1000, 664,
	-1000, 4070, -1000, -1000, 271, 194, 910, 5136, -1000, -1000,
	268, 4070, 852, 263, 4070, 5136, -1000, -1000, 4070, -1000,
	4070, 4070, 553, 1726, -1000, 692, -1000, 2594, -1000, -1000,
	-1000, 162, 379, -1000, -1000, -1000, 5136, 123, 114, 689,
	1004, -1000, -1000, -1000, -1000, 5136, -1000, -1000, 5136, 5136,
	-1000, 4070, 5136, 5136, -1000, 5136, 141, 814, 809, 5136,
	440, 5136, 4070, 357, 347, 730, 5136, 4070, 4070, 4070,
	4070, 4070, 2510, -1000, 627, 516, 822, -6, 367, -1000,
	27, 26, 140, 2597, -1000, -1000, -1000, 8, -1000, -1000,
	606, 513, -1000, -1000, 342, 338, -1000, 949, -1000, 3221,
	810, 610, 1654, 589, 378, 885, 99, 92, -1000, 734,
	1036, -1000, -1000, -1000, -1000, -1000, -1000, 398, 407, 378,
	397, -1000, 5023, -1000, -1000, 681, 600, -1000, -1000, 3221,
	-1000, 804, -1000, 378, -1000, -1000, 792, -1000, 2438, 378,
	378, 4383, -1000, -1000, -1000, 490, 821, -1000, 818, -1000,
	-1000, -1000, 1498, 134, 981, 488, 479, 378, 378, 884,
	882, -1000, 397, 5023, 5023, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1262, 139, 1261, 1260, 1258, 1256, 113, 1255, 1254,
	0, 103, 200, 18, 69, 81, 111, 84, 1253, 79,
	1250, 41, 37, 1248, 1247, 1246, 1245, 1244, 1242, 114,
	566, 1241, 1240, 1239, 112, 76, 86, 62, 1238, 1237,
	73, 580, 674, 1236, 1235, 1232, 1229, 99, 52, 9,
	180, 1228, 7, 1227, 1226, 1224, 138, 1223, 56, 1222,
	54, 1221, 1220, 66, 83, 143, 863, 77, 59, 87,
	116, 1219, 1217, 96, 94, 93, 1216, 48, 46, 1210,
	45, 100, 1209, 1207, 5, 58, 78, 74, 1202, 1201,
	38, 1200, 1198, 72, 64, 1197, 57, 1196, 23, 89,
	1195, 22, 1193, 702, 29, 145, 1191, 1190, 1188, 1187,
	105, 1186, 1185, 1184, 1183, 1181, 1180, 1178, 1177, 1176,
	1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1165,
	1163, 1162, 1161, 1160, 1159, 1157, 1155, 1154, 1149, 1148,
	1146, 1145, 1141, 1138, 1137, 110, 68, 82, 1135, 1133,
	1132, 33, 71, 61, 14, 1131, 1130, 19, 16, 75,
	1126, 13, 70, 1125, 1123, 47, 35, 44, 1122, 1121,
	1120, 1118, 1117, 1115, 3, 2, 6, 150, 1114, 1113,
	437, 80, 616, 36, 1112, 42, 55, 17, 32, 21,
	1111, 34, 1110, 1109, 1048, 1108, 39, 1105, 1104, 43,
	88, 119, 987, 115, 91, 1100, 1098, 31, 67, 1091,
	49, 1090, 30, 28, 60, 50, 1089, 1088, 1087, 1085,
	1084, 1080, 4, 85, 1078, 1077, 1073, 1071, 1068, 1067,
	1066, 98, 1065, 63, 1063, 90, 10, 120, 40, 1059,
	11, 1057, 117, 1052, 1046,
}
var yyR1 = [...]int{

	0, 227, 227, 228, 228, 109, 109, 109, 109, 109,
	110, 110, 110, 110, 110, 110, 110, 111, 229, 229,
	112, 230, 113, 170, 170, 23, 23, 23, 231, 231,
	114, 3, 3, 118, 119, 232, 232, 197, 199, 199,
	198, 115, 116, 116, 116, 116, 116, 117, 117, 117,
	138, 138, 126, 126, 126, 126, 131, 131, 134, 134,
	134, 141, 141, 141, 49, 49, 49, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	50, 50, 52, 52, 54, 53, 96, 95, 95, 62,
	62, 62, 233, 233, 233, 94, 94, 93, 93, 93,
	21, 21, 20, 20, 19, 57, 57, 56, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 58, 58, 234,
	234, 59, 60, 60, 64, 64, 65, 66, 67, 68,
	69, 69, 72, 72, 72, 72, 72, 72, 72, 73,
	74, 75, 75, 236, 236, 79, 79, 80, 76, 76,
	70, 61, 61, 61, 235, 235, 77, 78, 81, 81,
	82, 17, 17, 15, 83, 83, 18, 18, 16, 84,
	84, 85, 87, 87, 88, 88, 102, 102, 101, 89,
	89, 90, 91, 91, 92, 98, 98, 97, 100, 100,
	99, 108, 108, 107, 107, 205, 205, 208, 208, 209,
	104, 104, 103, 106, 106, 105, 121, 121, 145, 145,
	145, 237, 237, 237, 238, 147, 147, 146, 146, 148,
	148, 148, 152, 153, 157, 157, 156, 155, 155, 149,
	150, 151, 154, 154, 154, 154, 122, 122, 123, 124,
	124, 124, 158, 160, 160, 159, 159, 39, 165, 165,
	164, 168, 168, 167, 167, 166, 166, 166, 166, 22,
	37, 37, 161, 163, 163, 162, 125, 71, 169, 169,
	171, 171, 171, 171, 172, 172, 172, 176, 176, 173,
	173, 173, 174, 175, 175, 175, 175, 139, 139, 202,
	202, 203, 203, 203, 203, 203, 201, 201, 200, 200,
	204, 204, 140, 140, 132, 133, 135, 136, 137, 239,
	239, 127, 127, 178, 178, 177, 179, 179, 181, 181,
	181, 180, 180, 182, 182, 183, 183, 185, 185, 184,
	184, 184, 187, 187, 186, 192, 192, 191, 188, 188,
	188, 188, 189, 240, 240, 190, 190, 206, 206, 206,
	207, 207, 207, 128, 128, 128, 129, 129, 130, 142,
	41, 41, 43, 42, 44, 44, 45, 45, 46, 46,
	46, 46, 143, 144, 120, 241, 241, 195, 195, 196,
	63, 63, 63, 63, 63, 63, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 242, 242, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 243,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 9, 9, 8, 8,
	7, 7, 5, 14, 14, 13, 13, 6, 6, 6,
	25, 26, 26, 27, 30, 30, 28, 29, 29, 38,
	38, 38, 38, 38, 40, 31, 31, 32, 32, 32,
	32, 32, 35, 35, 34, 34, 34, 34, 36, 33,
	33, 33, 47, 47, 47, 244, 48, 48, 193, 193,
	194, 194, 194, 210, 210, 211, 211, 212, 213, 24,
	24, 216, 216, 220, 220, 217, 217, 217, 219, 219,
	219, 219, 219, 221, 221, 222, 222, 222, 222, 218,
	218, 223, 223, 224, 224, 225, 225, 226, 226, 86,
	86, 215, 215, 214, 214,
}
var yyR2 = [...]int{

	0, 2, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	2, 0, 5, 0, 1, 0, 2, 2, 1, 1,
	3, 0, 2, 1, 5, 0, 1, 0, 0, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 4, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 1, 1, 1, 7, 7, 2, 2, 4, 0,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 2,
	0, 1, 1, 2, 1, 0, 1, 2, 1, 5,
	7, 5, 7, 5, 6, 6, 7, 1, 3, 1,
	1, 3, 2, 6, 1, 2, 2, 1, 1, 1,
	0, 2, 1, 1, 1, 2, 2, 2, 2, 3,
	4, 4, 1, 0, 1, 1, 3, 2, 1, 1,
	1, 0, 1, 2, 0, 1, 4, 4, 0, 1,
	2, 1, 3, 3, 0, 2, 1, 3, 3, 0,
	1, 2, 0, 1, 5, 1, 1, 3, 2, 0,
	1, 2, 0, 1, 2, 0, 1, 3, 1, 3,
	3, 0, 1, 1, 1, 0, 2, 1, 1, 1,
	0, 1, 2, 0, 1, 2, 6, 8, 2, 2,
	6, 0, 6, 8, 2, 1, 3, 2, 2, 1,
	1, 1, 5, 7, 0, 1, 2, 1, 2, 2,
	2, 2, 1, 3, 5, 3, 6, 8, 7, 8,
	7, 7, 2, 1, 3, 4, 5, 4, 0, 1,
	3, 2, 3, 1, 3, 3, 3, 5, 5, 1,
	0, 2, 2, 1, 3, 2, 12, 1, 0, 1,
	0, 6, 6, 6, 0, 6, 6, 0, 6, 2,
	3, 2, 1, 2, 2, 2, 4, 4, 6, 1,
	3, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 3, 4, 6, 3, 3, 3, 3, 3, 1,
	1, 9, 12, 0, 1, 1, 0, 1, 1, 2,
	5, 1, 6, 4, 3, 0, 6, 0, 1, 2,
	2, 2, 0, 1, 2, 1, 3, 2, 1, 2,
	3, 2, 1, 1, 1, 0, 2, 0, 1, 2,
	1, 1, 1, 6, 6, 6, 7, 7, 8, 7,
	1, 1, 1, 2, 0, 1, 1, 3, 3, 4,
	8, 8, 3, 6, 8, 0, 1, 1, 3, 1,
	1, 3, 3, 5, 5, 4, 1, 3, 3, 5,
	5, 4, 5, 6, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 0,
	5, 1, 3, 3, 5, 5, 4, 5, 6, 4,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	3, 1, 3, 0, 1, 1, 3, 1, 1, 1,
	3, 1, 1, 3, 4, 5, 2, 0, 2, 7,
	7, 7, 6, 4, 1, 1, 1, 4, 4, 4,
	6, 6, 1, 3, 3, 3, 5, 5, 2, 6,
	6, 8, 3, 3, 1, 0, 5, 3, 1, 1,
	2, 3, 2, 0, 2, 1, 3, 3, 6, 0,
	1, 0, 3, 0, 3, 1, 1, 1, 0, 3,
	3, 2, 2, 1, 4, 2, 2, 2, 2, 1,
	1, 0, 1, 2, 2, 0, 2, 1, 1, 0,
	4, 0, 1, 2, 2,
}
var yyChk = [...]int{

	-1000, -227, -109, -193, -111, -112, -113, -114, -110, -10,
	-194, 5, 56, 138, 54, -115, -116, -117, -118, -120,
	-138, -141, -11, 116, 55, -240, 44, -49, -121, -122,
	-123, -124, -125, -126, -131, -134, -119, 186, -139, -140,
	-142, -143, -144, -1, -2, 208, 209, 163, -6, -38,
	109, -25, -31, -47, 32, 6, 47, -51, 86, 187,
	40, 108, -127, -128, -129, -130, -132, -133, -135, -136,
	-137, 83, 70, 153, 33, 46, 119, 110, 57, 177,
	206, 205, 207, -4, -5, 210, 211, 212, 118, -40,
	-42, 23, -32, -33, 213, -48, -52, 7, 20, -239,
	215, 217, -64, 10, 167, 51, 11, 60, 122, 31,
	-54, -53, 62, 178, -65, 171, -83, 112, 201, -228,
	236, 217, 231, 109, 232, 233, 234, 230, 9, 127,
	223, 224, 225, 226, 227, 228, 229, 15, 116, 101,
	79, 202, 89, -229, 82, -110, 54, -48, 213, -230,
	-10, 68, -48, -10, -10, -10, 44, -10, -145, 169,
	-68, -60, -66, 208, -64, -10, -243, -98, 181, 87,
	52, -97, 128, 88, 88, 66, 88, -232, 94, -202,
	-203, 208, 162, 86, 186, 40, -202, 161, 27, 139,
	82, 68, 161, 27, 139, 82, 68, 213, 213, 213,
	-26, -27, -28, -10, -30, 197, -10, -194, -49, 181,
	87, 52, 82, 82, 27, -9, -8, -7, -10, -14,
	-13, -10, -68, 208, -35, 9, -34, -22, 208, -35,
	9, -35, -10, -10, -10, -244, 221, -56, -96, 66,
	162, 221, -18, -16, -19, 208, 164, 208, 209, 217,
	-10, 232, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -12, -11, 15,
	101, 79, 202, -10, -10, -10, 119, 116, 110, -242,
	193, 95, -110, -170, 65, -3, 190, -41, -43, -42,
	-68, -10, -70, -69, 188, -241, 64, -21, -20, -19,
	12, -21, 236, -68, -66, 213, -103, -105, 102, 123,
	-50, 6, -52, -48, -50, 6, -50, 6, 21, -145,
	-145, -145, -145, -145, 174, 124, 220, 66, 124, -182,
	-65, -66, 208, -181, -180, -65, -66, -68, 82, -177,
	208, -41, -182, -181, 82, -180, -177, -65, 208, -41,
	-13, -14, -226, 232, 6, 44, -14, 50, -30, 197,
	-29, 49, -10, 214, 214, 214, -50, 6, -50, 6,
	-50, 6, -180, -177, 124, -181, 216, 220, 221, 218,
	220, -36, 220, 159, 51, 79, 202, 221, -36, 51,
	-36, 64, 64, 221, 213, -81, -82, 99, -57, -56,
	-55, -58, -59, -10, -60, -64, -95, -62, 6, 44,
	220, 12, -10, 218, 221, 218, 9, 236, 217, 231,
	109, 232, 233, 234, 230, -12, -10, -10, -10, 119,
	110, -242, -23, 208, 207, -2, 213, -158, -161, 165,
	185, -72, -73, -74, -75, -236, 82, 74, 114, 139,
	-181, -19, -67, 208, 236, -10, -106, -105, -104, -103,
	-10, -10, -50, -50, -50, -100, -99, -10, -237, 213,
	-237, 213, -70, -71, -69, -197, -200, -204, 208, -201,
	-145, -203, -200, -201, -66, 236, -66, 236, -178, -177,
	124, 213, 124, 236, 124, -66, 214, 214, -10, 214,
	214, -29, -10, -10, 172, -50, -50, -50, 236, 124,
	-181, -7, -10, -10, 50, -34, -10, -35, -10, -10,
	-22, 50, -35, 50, -35, -35, -10, -49, -84, -85,
	198, -17, -15, -19, -81, -61, 85, 98, 154, -21,
	-21, -68, -94, -233, -93, 146, 48, 192, 232, -10,
	-16, -47, 218, 219, 218, -10, -12, 208, 209, 217,
	-10, 232, -12, -12, -12, -12, -12, -12, 9, -110,
	-231, 66, 12, -231, -14, -161, -84, -84, -160, -159,
	-63, -39, 208, -40, -163, -162, -63, 208, -75, -75,
	-74, -73, 93, 213, 213, 213, 236, -67, 214, 220,
	-108, -107, 13, 42, -147, -146, 194, -154, -236, -149,
	-238, -147, -154, -84, 190, -199, -198, 201, 220, 221,
	174, 220, 66, 236, -67, 236, -67, 124, -181, -44,
	-45, 208, -181, -177, -181, -225, 66, -86, 59, 214,
	-86, 172, -10, -177, -181, 213, -36, 79, 202, -36,
	-37, 197, -37, 64, 214, -87, -88, 71, -90, 100,
	-10, 220, 223, -84, 91, 113, -234, 184, 61, -235,
	130, -235, -69, -69, 220, -10, 236, -21, 218, -10,
	218, 221, 218, -12, 214, -84, -104, -104, 220, 223,
	236, 217, 236, 213, 220, -165, -164, -168, 64, -10,
	-79, -80, -179, -177, -76, 20, 142, -195, -196, -188,
	-189, -240, 44, -10, -68, 236, -99, -205, -209, 120,
	-157, 220, -156, 152, -152, -153, 213, 214, 92, 220,
	-10, -157, 214, -104, -58, -10, -204, 208, -200, -145,
	-200, -67, -67, 236, -181, 213, 214, 220, -185, -184,
	190, -185, -185, -223, -224, 150, 77, -208, 60, 97,
	-223, 213, -86, -215, -214, 131, -10, -185, -185, -13,
	50, -10, -10, 50, 50, -10, 50, -35, -210, 200,
	21, -17, -15, -10, -87, -58, -58, -10, 91, -93,
	-21, 232, 218, 219, 218, -10, -104, -157, -157, -159,
	-10, 208, 209, 217, -10, -63, -14, -162, -37, 64,
	-167, -166, -22, 214, 220, -185, 214, 214, 220, -189,
	44, -189, -21, -68, -208, -148, -146, -152, -153, -155,
	-94, -233, -10, -49, 220, -150, -151, 192, 126, -49,
	-157, 124, 236, -68, -183, 133, -192, -191, -188, -46,
	215, 96, 208, 196, 73, 67, -214, 120, 120, -215,
	-85, -215, 208, -213, 213, -186, 201, -186, 214, -37,
	-96, -211, -212, 208, -102, -101, -10, -210, -77, -78,
	124, -77, -78, 124, -21, -58, 218, -157, -165, -10,
	218, 223, 214, 50, -167, 220, 79, 202, 221, -80,
	-199, -196, -189, -10, 220, -157, 192, 220, -10, -10,
	-157, -169, -238, -236, -68, -185, 21, 214, 220, -206,
	-207, 13, 42, 110, -10, 84, 69, 90, 214, -24,
	208, -10, -185, 50, 220, 12, -89, 220, -90, -21,
	64, -10, -236, 64, -10, 124, 218, 219, -10, -166,
	-10, -10, -22, -10, 214, 220, -151, -10, 92, -187,
	-186, 74, -183, -191, -207, 216, 12, 12, 12, -216,
	133, -212, -213, -91, -92, 75, -101, 208, 93, 92,
	208, -10, 79, 202, 214, 220, 126, -171, 197, 213,
	-190, 198, -10, 215, 215, -98, 21, -10, -10, -10,
	-10, -10, -10, 214, -104, 106, 116, -13, -185, -189,
	207, 207, -220, -217, 158, 145, 72, -13, 214, -157,
	172, 106, 214, -187, 220, 220, 214, -221, -222, 15,
	179, 34, -10, 186, 40, 172, 207, 207, -219, 53,
	-222, 137, 63, 157, -218, 137, 63, -173, -158, -161,
	-174, -84, 86, 216, 216, 115, 34, 173, 71, 9,
	-172, 197, -84, -161, -84, -176, 197, -175, -10, -152,
	-153, 213, 129, 157, -222, 106, 116, -84, 116, -84,
	-84, -84, -10, -154, 172, 106, 106, 214, 40, 172,
	172, -84, -174, 86, 86, -176, -175, -175,
}
var yyDef = [...]int{

	164, -2, 3, 2, 5, 6, 7, 8, 9, 518,
	519, 18, 164, 21, 0, 10, 11, 12, 13, 14,
	15, 16, 386, 0, 0, 0, 0, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 33, 0, 50, 51,
	61, 62, 63, 428, 429, -2, 431, 432, 433, 434,
	0, 436, 437, 438, 439, 343, 344, 185, 0, 0,
	0, 0, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 35, 0, 0, 0, 0, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 477, 478, 479, 0, 0,
	0, 0, 495, 496, 164, 514, 67, 0, 0, 0,
	466, 473, 0, 0, 0, 0, 0, 0, 0, 515,
	82, 83, 309, 310, 124, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 19, 20, 0, 0, 164, 23,
	31, 0, 514, 403, 425, 520, 0, 522, 130, 375,
	100, 100, 0, -2, 0, 435, 0, 64, 164, 164,
	164, 186, 0, 0, 0, 0, 0, 0, 36, 0,
	289, 291, 292, 293, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 473, 473,
	0, 481, 482, 0, 487, 0, 0, 0, 0, 164,
	164, 164, 0, 0, 0, 0, 467, 468, 471, 0,
	474, 475, 363, 129, 0, 0, 502, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 125, 158, 105, 0,
	89, 126, 165, 166, 0, 104, 4, 387, 388, 0,
	0, 0, 395, 396, 397, 398, 399, 400, 401, 402,
	-2, -2, -2, -2, -2, -2, -2, 0, 441, 0,
	0, 0, 0, -2, -2, -2, 419, 0, 421, 423,
	426, 427, 17, 25, 24, 30, 0, 0, 360, 361,
	362, 521, 0, 150, 143, 0, 376, 208, 101, 102,
	0, 209, 0, 122, 0, 0, 203, 200, 0, 0,
	68, 164, 80, 81, 70, 164, 72, 164, 0, 211,
	211, 130, 130, 37, 0, 0, 0, 0, 0, 304,
	0, 0, 127, 306, 318, 0, 0, 321, 313, 0,
	315, 0, 305, 307, 0, 0, 0, 0, -2, 372,
	0, 0, 0, 0, 557, 558, 0, 480, 487, 0,
	486, 0, 0, 512, 513, 517, 74, 164, 76, 164,
	78, 164, 0, 0, 0, 308, 465, 0, 0, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 169, 159, 0, 158, 106,
	-2, 108, 117, 100, 100, 0, 86, 0, 90, 91,
	0, 0, 0, 391, 0, 394, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, -2, -2, 420,
	422, 424, 164, 0, 0, 32, 473, 169, 169, 0,
	0, 131, 132, 133, -2, 0, 0, 0, 142, 144,
	0, 103, 0, 128, 0, 0, 65, 204, 66, 201,
	202, 205, 69, 71, 73, 187, 188, 191, 0, 143,
	0, 143, 169, 0, 267, 38, 287, 298, 300, 0,
	296, 290, 302, 0, 0, 0, 319, 0, 0, 314,
	0, 364, 0, 0, 0, 0, 555, 559, 0, 559,
	493, 483, 0, 488, 0, 75, 77, 79, 0, 0,
	0, 469, 470, 476, 497, 503, 508, 0, 504, 505,
	0, 498, 0, 499, 260, 260, 0, 0, 172, 170,
	0, 160, 161, 0, 169, 0, 152, 154, 154, 130,
	130, -2, 87, 0, 95, 92, 93, 94, 97, 100,
	167, 168, 389, 390, 392, 0, 411, 442, 443, 0,
	0, 0, 450, 451, 452, 453, 454, 455, 0, 22,
	26, 28, 29, 27, 0, 169, 200, 200, 242, 243,
	0, 0, -2, 0, 262, 263, 248, 380, 137, 135,
	136, 138, 0, 316, 0, 0, 0, 0, 440, 0,
	195, 192, 193, 194, 224, 215, 0, 0, 0, 232,
	0, 224, 0, 200, 0, 34, 39, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 0,
	365, 366, 327, 327, 327, 551, 0, 551, 0, 559,
	561, 0, 484, 327, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 523, 173, 0, 175, 0,
	171, 0, 0, 172, 0, 0, 0, 119, 120, 153,
	155, 0, 118, 121, 0, 100, 0, 99, 393, 0,
	446, 0, 449, 412, 373, 200, 224, 224, 0, 0,
	0, 0, 0, 473, 0, 265, 249, 260, 0, 139,
	0, 145, 327, 317, 0, 148, 149, 0, 377, 379,
	338, 0, 0, 342, 100, 0, 189, 190, 0, 199,
	206, 0, 225, 0, 217, 218, 0, 164, 214, 0,
	229, 236, 164, 224, 0, 40, 299, 301, 288, 297,
	303, 323, 0, 0, 325, 0, 0, 0, 353, 328,
	0, 354, 355, 0, 552, 0, 0, 556, 197, 198,
	561, 0, 561, 492, 562, 0, 485, 0, 0, 0,
	500, 506, 507, 501, 509, 261, 510, 260, 0, 0,
	0, 181, 162, 163, 523, 0, 0, 100, 0, 96,
	88, 98, 444, 445, 447, 0, 224, 240, 241, 244,
	248, 381, 382, 0, 0, 0, 0, 264, 0, 0,
	251, 253, 0, 140, 316, 147, 141, 38, 0, 339,
	0, 341, 210, 123, 196, 216, 219, 220, 221, 226,
	227, 0, 0, 224, 0, 233, 235, 0, 0, 224,
	238, -2, 0, 320, 327, 0, 0, 335, 347, 359,
	0, 0, 367, 329, 330, 331, 489, 553, 554, 490,
	0, 491, 563, 564, 529, 356, 0, 357, 327, 0,
	84, 524, 525, 0, 179, 176, 100, 85, 109, 0,
	143, 111, 0, 143, 113, 0, 448, 239, 245, 0,
	385, 0, 247, 250, 252, 0, 0, 0, 0, 146,
	374, 378, 340, 228, 0, 207, 0, 0, 230, 231,
	237, 0, 269, 0, 322, 332, 0, 325, 0, 337,
	348, 350, 351, 352, 0, 0, 0, 0, 560, 531,
	530, 334, 358, 511, 0, 0, 182, 0, 180, 178,
	0, 114, 0, 0, 115, 0, 383, 384, 246, 254,
	255, 256, 0, 0, 212, 0, 234, 270, 214, 311,
	333, 0, 345, 336, 349, 368, 0, 0, 0, 185,
	0, 526, 527, 174, 183, 0, 177, 110, 0, 0,
	112, 116, 0, 0, 222, 0, 0, 200, 0, 0,
	327, 0, 369, 0, 0, 533, 0, 184, 156, 157,
	257, 258, 0, 213, 224, 0, 0, 0, 332, 346,
	0, 0, 0, 0, 535, 536, 537, 532, 223, 266,
	0, 0, 326, 312, 0, 0, 528, 538, 543, 0,
	0, 0, 0, 0, 169, 0, 0, 0, 534, 0,
	0, 545, 546, 547, 548, 549, 550, 274, 169, 169,
	277, 282, 0, 370, 371, 0, 0, 541, 542, 0,
	271, 0, 279, 169, 281, 272, 0, 273, 169, 169,
	169, -2, 539, 540, 544, 0, 0, 280, 0, 283,
	284, 285, 0, 0, 0, 0, 0, 169, 169, 0,
	0, 286, 277, 0, 0, 275, 276, 278,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:487
		{
			yylex.(*lexer).setStatement(yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:492
		{
			yylex.(*lexer).setExpression(yyDollar[1].expr)
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:498
		{
			/* nothing */
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:535
		{
			yyVAL.statement = algebra.NewAdvise(yyDollar[3].statement, yylex.(*lexer).Remainder(yyDollar[1].tokOffset))
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:544
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:551
		{
			yyVAL.statement = algebra.NewExplain(yyDollar[2].statement, yylex.(*lexer).Remainder(yyDollar[1].tokOffset))
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:558
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:562
		{
			yyVAL.statement = algebra.NewPrepare(yyDollar[4].s, yyDollar[3].b, yyDollar[5].statement, yylex.(*lexer).getText(), yylex.(*lexer).getOffset())
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:569
		{
			yyVAL.b = false
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:574
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
			yyVAL.b = true
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:582
		{
			yyVAL.s = ""
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:587
		{
			yyVAL.s = yyDollar[1].s
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:592
		{
			yyVAL.s = yyDollar[1].s
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:599
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:604
		{
			yylex.(*lexer).setOffset(yyDollar[1].tokOffset)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:611
		{
			yyVAL.statement = algebra.NewExecute(yyDollar[2].expr, yyDollar[3].expr)
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:618
		{
			yyVAL.expr = nil
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:623
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:634
		{
			yyVAL.statement = algebra.NewInferKeyspace(yyDollar[3].keyspaceRef, yyDollar[4].inferenceType, yyDollar[5].val)
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:641
		{
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:649
		{
			yyVAL.inferenceType = datastore.INF_DEFAULT
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:656
		{
			yyVAL.val = nil
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:665
		{
			yyVAL.val = yyDollar[2].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:675
		{
			yyVAL.statement = yyDollar[1].fullselect
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:740
		{
			yyVAL.fullselect = algebra.NewSelect(yyDollar[1].subresult, yyDollar[2].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:745
		{
			yyVAL.fullselect = algebra.NewSelect(yyDollar[1].subresult, yyDollar[2].order, yyDollar[4].expr, yyDollar[3].expr) /* OFFSET precedes LIMIT */
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:750
		{
			yyVAL.fullselect = algebra.NewSelect(yyDollar[1].subresult, yyDollar[2].order, yyDollar[3].expr, yyDollar[4].expr) /* OFFSET precedes LIMIT */
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:757
		{
			yyVAL.subresult = yyDollar[1].subselect
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:762
		{
			yyVAL.subresult = algebra.NewUnion(yyDollar[1].subresult, yyDollar[3].subresult)
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:767
		{
			yyVAL.subresult = algebra.NewUnionAll(yyDollar[1].subresult, yyDollar[4].subresult)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:772
		{
			yyVAL.subresult = algebra.NewIntersect(yyDollar[1].subresult, yyDollar[3].subresult)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:777
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyDollar[1].subresult, yyDollar[4].subresult)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:782
		{
			yyVAL.subresult = algebra.NewExcept(yyDollar[1].subresult, yyDollar[3].subresult)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:787
		{
			yyVAL.subresult = algebra.NewExceptAll(yyDollar[1].subresult, yyDollar[4].subresult)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:792
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewUnion(left_term, yyDollar[3].subresult)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:798
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewUnionAll(left_term, yyDollar[4].subresult)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:804
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewIntersect(left_term, yyDollar[3].subresult)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:810
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewIntersectAll(left_term, yyDollar[4].subresult)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:816
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewExcept(left_term, yyDollar[3].subresult)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:822
		{
			left_term := algebra.NewSelectTerm(yyDollar[1].subquery.Select())
			yyVAL.subresult = algebra.NewExceptAll(left_term, yyDollar[4].subresult)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:830
		{
			yyVAL.subresult = yyDollar[1].subselect
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:835
		{
			yyVAL.subresult = algebra.NewSelectTerm(yyDollar[1].subquery.Select())
		}
	case 84:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:848
		{
			yyVAL.subselect = algebra.NewSubselect(yyDollar[1].bindings, yyDollar[2].fromTerm, yyDollar[3].bindings, yyDollar[4].expr, yyDollar[5].group, yyDollar[6].windowTerms, yyDollar[7].projection)
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:855
		{
			yyVAL.subselect = algebra.NewSubselect(yyDollar[1].bindings, yyDollar[3].fromTerm, yyDollar[4].bindings, yyDollar[5].expr, yyDollar[6].group, yyDollar[7].windowTerms, yyDollar[2].projection)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:870
		{
			yyVAL.projection = yyDollar[2].projection
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:877
		{
			yyVAL.projection = algebra.NewProjection(yyDollar[1].b, yyDollar[2].resultTerms)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:882
		{
			yyVAL.projection = algebra.NewRawProjection(yyDollar[1].b, yyDollar[3].expr, yyDollar[4].s)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:889
		{
			yyVAL.b = false
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:892
		{
			yyVAL.b = false
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:895
		{
			yyVAL.b = true
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:908
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyDollar[1].resultTerm}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:913
		{
			yyVAL.resultTerms = append(yyDollar[1].resultTerms, yyDollar[3].resultTerm)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:920
		{
			yyVAL.resultTerm = algebra.NewResultTerm(expression.SELF, true, "")
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:925
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyDollar[1].expr, true, "")
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:930
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyDollar[1].expr, false, yyDollar[2].s)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:937
		{
			yyVAL.s = ""
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:948
		{
			yyVAL.s = yyDollar[2].s
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:966
		{
			yyVAL.fromTerm = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:975
		{
			yyVAL.fromTerm = yyDollar[2].fromTerm
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:982
		{
			if yyDollar[1].simpleFromTerm.JoinHint() != algebra.JOIN_HINT_NONE {
				yylex.Error(fmt.Sprintf("Join hint (USE HASH or USE NL) cannot be specified on the first from term %s", yyDollar[1].simpleFromTerm.Alias()))
			}
			yyVAL.fromTerm = yyDollar[1].simpleFromTerm
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:990
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("JOIN must be done on a keyspace.")
			} else {
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewJoin(yyDollar[1].fromTerm, yyDollar[2].b, ksterm)
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1001
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("JOIN must be done on a keyspace.")
			} else {
				ksterm.SetIndexJoinNest()
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewIndexJoin(yyDollar[1].fromTerm, yyDollar[2].b, ksterm, yyDollar[7].s)
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1013
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("NEST must be done on a keyspace.")
			} else {
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewNest(yyDollar[1].fromTerm, yyDollar[2].b, ksterm)
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1024
		{
			ksterm := algebra.GetKeyspaceTerm(yyDollar[4].simpleFromTerm)
			if ksterm == nil {
				yylex.Error("NEST must be done on a keyspace.")
			} else {
				ksterm.SetIndexJoinNest()
				ksterm.SetJoinKeys(yyDollar[5].expr)
			}
			yyVAL.fromTerm = algebra.NewIndexNest(yyDollar[1].fromTerm, yyDollar[2].b, ksterm, yyDollar[7].s)
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1036
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyDollar[1].fromTerm, yyDollar[2].b, yyDollar[4].expr, yyDollar[5].s)
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1041
		{
			yyDollar[4].simpleFromTerm.SetAnsiJoin()
			yyVAL.fromTerm = algebra.NewAnsiJoin(yyDollar[1].fromTerm, yyDollar[2].b, yyDollar[4].simpleFromTerm, yyDollar[6].expr)
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1047
		{
			yyDollar[4].simpleFromTerm.SetAnsiNest()
			yyVAL.fromTerm = algebra.NewAnsiNest(yyDollar[1].fromTerm, yyDollar[2].b, yyDollar[4].simpleFromTerm, yyDollar[6].expr)
		}
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1053
		{
			yyDollar[1].simpleFromTerm.SetAnsiJoin()
			yyVAL.fromTerm = algebra.NewAnsiRightJoin(yyDollar[1].simpleFromTerm, yyDollar[5].simpleFromTerm, yyDollar[7].expr)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1061
		{
			yyVAL.simpleFromTerm = yyDollar[1].keyspaceTerm
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1066
		{
			switch other := yyDollar[1].expr.(type) {
			case *algebra.Subquery:
				if yyDollar[2].s == "" {
					yylex.Error("Subquery in FROM clause must have an alias.")
				}
				if yyDollar[3].use.Keys() != nil || yyDollar[3].use.Indexes() != nil {
					yylex.Error("FROM Subquery cannot have USE KEYS or USE INDEX.")
				}
				yyVAL.simpleFromTerm = algebra.NewSubqueryTerm(other.Select(), yyDollar[2].s, yyDollar[3].use.JoinHint())
			case *expression.Identifier:
				ksterm := algebra.NewKeyspaceTermFromPath(algebra.NewPathWithContext(other.Alias(), yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext()),
					yyDollar[2].s, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes())
				yyVAL.simpleFromTerm = algebra.NewExpressionTerm(other, yyDollar[2].s, ksterm, other.Parenthesis() == false, yyDollar[3].use.JoinHint())
			default:
				if yyDollar[3].use.Keys() != nil || yyDollar[3].use.Indexes() != nil {
					yylex.Error("FROM Expression cannot have USE KEYS or USE INDEX.")
				}
				yyVAL.simpleFromTerm = algebra.NewExpressionTerm(other, yyDollar[2].s, nil, false, yyDollar[3].use.JoinHint())
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1097
		{
			ksterm := algebra.NewKeyspaceTermFromPath(yyDollar[1].keyspacePath, yyDollar[2].s, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes())
			if yyDollar[3].use.JoinHint() != algebra.JOIN_HINT_NONE {
				ksterm.SetJoinHint(yyDollar[3].use.JoinHint())
			}
			yyVAL.keyspaceTerm = ksterm
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1108
		{
			yyVAL.keyspacePath = algebra.NewPathShort(yyDollar[1].s, yyDollar[2].s)
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1113
		{
			yyVAL.keyspacePath = algebra.NewPathLong(yyDollar[1].s, yyDollar[2].s, yyDollar[4].s, yyDollar[6].s)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1125
		{
			yyVAL.s = "#system"
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1132
		{
			yyVAL.s = yyDollar[1].s
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1151
		{
			yyVAL.use = algebra.EMPTY_USE
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1156
		{
			yyVAL.use = yyDollar[2].use
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1169
		{
			yyDollar[1].use.SetJoinHint(yyDollar[2].use.JoinHint())
			yyVAL.use = yyDollar[1].use
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1175
		{
			yyDollar[1].use.SetIndexes(yyDollar[2].use.Indexes())
			yyVAL.use = yyDollar[1].use
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1181
		{
			yyDollar[1].use.SetJoinHint(yyDollar[2].use.JoinHint())
			yyVAL.use = yyDollar[1].use
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1187
		{
			yyDollar[1].use.SetKeys(yyDollar[2].use.Keys())
			yyVAL.use = yyDollar[1].use
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1195
		{
			yyVAL.use = algebra.NewUse(yyDollar[3].expr, nil, algebra.JOIN_HINT_NONE)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1202
		{
			yyVAL.use = algebra.NewUse(nil, yyDollar[3].indexRefs, algebra.JOIN_HINT_NONE)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1209
		{
			yyVAL.use = algebra.NewUse(nil, nil, yyDollar[3].joinHint)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1214
		{
			yyVAL.use = algebra.NewUse(nil, nil, algebra.USE_NL)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1221
		{
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1229
		{
			yyVAL.indexRefs = algebra.IndexRefs{yyDollar[1].indexRef}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1234
		{
			yyVAL.indexRefs = append(yyDollar[1].indexRefs, yyDollar[3].indexRef)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1241
		{
			yyVAL.indexRef = algebra.NewIndexRef(yyDollar[1].s, yyDollar[2].indexType)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1247
		{
			yyVAL.joinHint = algebra.USE_HASH_BUILD
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1252
		{
			yyVAL.joinHint = algebra.USE_HASH_PROBE
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1259
		{
			if yyDollar[1].use.JoinHint() != algebra.JOIN_HINT_NONE {
				yylex.Error("Keyspace reference cannot have join hint (USE HASH or USE NL) in DELETE or UPDATE statement")
			}
			yyVAL.use = yyDollar[1].use
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1269
		{
			yyVAL.b = false
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1274
		{
			yyVAL.b = false
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1279
		{
			yyVAL.b = true
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1292
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1299
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1313
		{
			yyVAL.bindings = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1322
		{
			yyVAL.bindings = yyDollar[2].bindings
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1329
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1334
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1341
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1354
		{
			yyVAL.bindings = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1357
		{
			yyVAL.bindings = yyDollar[2].bindings
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1364
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1369
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1380
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
			yyVAL.binding.SetStatic(true)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1395
		{
			yyVAL.expr = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1404
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1418
		{
			yyVAL.group = nil
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1427
		{
			yyVAL.group = algebra.NewGroup(yyDollar[3].groupTerms, yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1432
		{
			yyVAL.group = algebra.NewGroup(nil, yyDollar[1].bindings, nil)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1439
		{
			yyVAL.groupTerms = algebra.GroupTerms{yyDollar[1].groupTerm}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1444
		{
			yyVAL.groupTerms = append(yyDollar[1].groupTerms, yyDollar[3].groupTerm)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1451
		{
			yyVAL.groupTerm = algebra.NewGroupTerm(yyDollar[1].expr, yyDollar[2].s)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1458
		{
			yyVAL.bindings = nil
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1467
		{
			yyVAL.bindings = yyDollar[2].bindings
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1474
		{
			yyVAL.expr = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1483
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1497
		{
			yyVAL.order = nil
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1506
		{
			yyVAL.order = algebra.NewOrder(yyDollar[3].sortTerms)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1513
		{
			yyVAL.sortTerms = algebra.SortTerms{yyDollar[1].sortTerm}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1518
		{
			yyVAL.sortTerms = append(yyDollar[1].sortTerms, yyDollar[3].sortTerm)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1525
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyDollar[1].expr, yyDollar[2].b, algebra.NewOrderNullsPos(yyDollar[2].b, yyDollar[3].u32))
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1532
		{
			yyVAL.b = false
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1541
		{
			yyVAL.b = false
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1546
		{
			yyVAL.b = true
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1553
		{
			yyVAL.u32 = algebra.NewOrderNulls(true, false, false)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1558
		{
			yyVAL.u32 = algebra.NewOrderNulls(false, yyDollar[1].b, yyDollar[2].b)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1564
		{
			yyVAL.b = false
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1566
		{
			yyVAL.b = true
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1570
		{
			yyVAL.b = true
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1581
		{
			yyVAL.expr = nil
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1590
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1604
		{
			yyVAL.expr = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1613
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1627
		{
			yyVAL.statement = algebra.NewInsertValues(yyDollar[3].keyspaceRef, yyDollar[5].pairs, yyDollar[6].projection)
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:1632
		{
			yyVAL.statement = algebra.NewInsertSelect(yyDollar[3].keyspaceRef, yyDollar[5].pair.Key(), yyDollar[5].pair.Value(), yyDollar[5].pair.Options(), yyDollar[7].fullselect, yyDollar[8].projection)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1639
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefWithContext(yyDollar[1].s, yyDollar[2].s, yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1644
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(yyDollar[1].keyspacePath, yyDollar[2].s)
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1649
		{
			path := algebra.NewPathLong(yylex.(*lexer).Namespace(), yyDollar[1].s, yyDollar[3].s, yyDollar[5].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, yyDollar[6].s)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1671
		{
			yyVAL.pairs = append(yyDollar[1].pairs, yyDollar[3].pairs...)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1678
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[2].pair}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1683
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[2].pair}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1692
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[1].pair}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1697
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[1].pair}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1704
		{
			yyVAL.pair = algebra.NewPair(yyDollar[2].expr, yyDollar[4].expr, nil)
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1711
		{
			yyVAL.pair = algebra.NewPair(yyDollar[2].expr, yyDollar[4].expr, yyDollar[6].expr)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1719
		{
			yyVAL.projection = nil
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1728
		{
			yyVAL.projection = yyDollar[2].projection
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1735
		{
			yyVAL.projection = algebra.NewProjection(false, yyDollar[1].resultTerms)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1740
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyDollar[2].expr, "")
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1747
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1754
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1761
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1768
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, nil, nil)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1773
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, yyDollar[3].expr, nil)
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1778
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1783
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, nil, yyDollar[3].expr)
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:1799
		{
			yyVAL.statement = algebra.NewUpsertValues(yyDollar[3].keyspaceRef, yyDollar[5].pairs, yyDollar[6].projection)
		}
	case 237:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:1804
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyDollar[3].keyspaceRef, yyDollar[5].pair.Key(), yyDollar[5].pair.Value(), yyDollar[5].pair.Options(), yyDollar[7].fullselect, yyDollar[8].projection)
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1818
		{
			yyVAL.statement = algebra.NewDelete(yyDollar[3].keyspaceRef, yyDollar[4].use.Keys(), yyDollar[4].use.Indexes(), yyDollar[5].expr, yyDollar[6].expr, yyDollar[7].projection)
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:1832
		{
			yyVAL.statement = algebra.NewUpdate(yyDollar[2].keyspaceRef, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes(), yyDollar[4].set, yyDollar[5].unset, yyDollar[6].expr, yyDollar[7].expr, yyDollar[8].projection)
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1837
		{
			yyVAL.statement = algebra.NewUpdate(yyDollar[2].keyspaceRef, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes(), yyDollar[4].set, nil, yyDollar[5].expr, yyDollar[6].expr, yyDollar[7].projection)
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:1842
		{
			yyVAL.statement = algebra.NewUpdate(yyDollar[2].keyspaceRef, yyDollar[3].use.Keys(), yyDollar[3].use.Indexes(), nil, yyDollar[4].unset, yyDollar[5].expr, yyDollar[6].expr, yyDollar[7].projection)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1849
		{
			yyVAL.set = algebra.NewSet(yyDollar[2].setTerms)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1856
		{
			yyVAL.setTerms = algebra.SetTerms{yyDollar[1].setTerm}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1861
		{
			yyVAL.setTerms = append(yyDollar[1].setTerms, yyDollar[3].setTerm)
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1868
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyDollar[1].path, yyDollar[3].expr, yyDollar[4].updateFor, nil)
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1873
		{
			yyVAL.setTerm = nil
			if yyDollar[1].expr != nil && algebra.IsValidMetaMutatePath(yyDollar[3].path) {
				yyVAL.setTerm = algebra.NewSetTerm(yyDollar[3].path, yyDollar[5].expr, nil, yyDollar[1].expr)
			} else if yyDollar[1].expr != nil {
				yylex.Error(fmt.Sprintf("SET clause has invalid path %s", yyDollar[3].path.String()))
				yylex.(*lexer).Stop()
			}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:1886
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyDollar[1].s)
			if ok && strings.ToLower(yyDollar[1].s) == "meta" && len(yyDollar[3].exprs) >= f.MinArgs() && len(yyDollar[3].exprs) <= f.MaxArgs() {
				yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
			} else {
				yylex.Error(fmt.Sprintf("SET clause has invalid path %s", yyDollar[1].s))
				yylex.(*lexer).Stop()
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1901
		{
			yyVAL.updateFor = nil
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1910
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyDollar[1].dimensions, yyDollar[2].expr)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1917
		{
			yyVAL.dimensions = []expression.Bindings{yyDollar[2].bindings}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1922
		{
			dims := make([]expression.Bindings, 0, 1+len(yyDollar[1].dimensions))
			dims = append(dims, yyDollar[3].bindings)
			yyVAL.dimensions = append(dims, yyDollar[1].dimensions...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1931
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1936
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1943
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1948
		{
			yyVAL.binding = expression.NewBinding("", yyDollar[1].s, yyDollar[3].expr, true)
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1953
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, false)
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:1958
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:1969
		{
			yyVAL.expr = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1974
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:1981
		{
			yyVAL.unset = algebra.NewUnset(yyDollar[2].unsetTerms)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:1988
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyDollar[1].unsetTerm}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:1993
		{
			yyVAL.unsetTerms = append(yyDollar[1].unsetTerms, yyDollar[3].unsetTerm)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2000
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyDollar[1].path, yyDollar[2].updateFor)
		}
	case 266:
		yyDollar = yyS[yypt-12 : yypt+1]
//line n1ql.y:2014
		{
			switch other := yyDollar[6].simpleFromTerm.(type) {
			case *algebra.SubqueryTerm:
				source := algebra.NewMergeSourceSubquery(other)
				yyVAL.statement = algebra.NewMerge(yyDollar[3].keyspaceRef, yyDollar[4].use.Indexes(), source, yyDollar[8].b, yyDollar[9].expr, yyDollar[10].mergeActions, yyDollar[11].expr, yyDollar[12].projection)
			case *algebra.ExpressionTerm:
				source := algebra.NewMergeSourceExpression(other)
				yyVAL.statement = algebra.NewMerge(yyDollar[3].keyspaceRef, yyDollar[4].use.Indexes(), source, yyDollar[8].b, yyDollar[9].expr, yyDollar[10].mergeActions, yyDollar[11].expr, yyDollar[12].projection)
			case *algebra.KeyspaceTerm:
				source := algebra.NewMergeSourceFrom(other)
				yyVAL.statement = algebra.NewMerge(yyDollar[3].keyspaceRef, yyDollar[4].use.Indexes(), source, yyDollar[8].b, yyDollar[9].expr, yyDollar[10].mergeActions, yyDollar[11].expr, yyDollar[12].projection)
			default:
				yylex.Error("MERGE source term is UNKNOWN.")
			}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2033
		{
			if yyDollar[1].use.Keys() != nil {
				yylex.Error("Keyspace reference cannot have USE KEYS hint in MERGE statement.")
			} else if yyDollar[1].use.JoinHint() != algebra.JOIN_HINT_NONE {
				yylex.Error("Keyspace reference cannot have join hint (USE HASH or USE NL)in MERGE statement.")
			}
			yyVAL.use = yyDollar[1].use
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2045
		{
			yyVAL.b = false
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2050
		{
			yyVAL.b = true
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2057
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2062
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyDollar[5].mergeUpdate, yyDollar[6].mergeActions.Delete(), yyDollar[6].mergeActions.Insert())
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2067
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyDollar[5].mergeDelete, yyDollar[6].mergeInsert)
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2072
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyDollar[6].mergeInsert)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2079
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2084
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyDollar[5].mergeDelete, yyDollar[6].mergeInsert)
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2089
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyDollar[6].mergeInsert)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2096
		{
			yyVAL.mergeInsert = nil
		}
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2101
		{
			yyVAL.mergeInsert = yyDollar[6].mergeInsert
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2108
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyDollar[1].set, nil, yyDollar[2].expr)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2113
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyDollar[1].set, yyDollar[2].unset, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2118
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyDollar[1].unset, yyDollar[2].expr)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2125
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyDollar[1].expr)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2132
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(nil, yyDollar[1].expr, nil, yyDollar[2].expr)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2137
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyDollar[1].pair.Key(), yyDollar[1].pair.Value(), nil, yyDollar[2].expr)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2142
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyDollar[1].pair.Key(), yyDollar[1].pair.Value(), yyDollar[1].pair.Options(), yyDollar[2].expr)
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2147
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyDollar[2].pair.Key(), yyDollar[2].pair.Value(), yyDollar[2].pair.Options(), yyDollar[4].expr)
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2160
		{
			yyVAL.statement = algebra.NewGrantRole(yyDollar[2].ss, nil, yyDollar[4].ss)
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2165
		{
			yyVAL.statement = algebra.NewGrantRole(yyDollar[2].ss, yyDollar[4].keyspaceRefs, yyDollar[6].ss)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2172
		{
			yyVAL.ss = []string{yyDollar[1].s}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2177
		{
			yyVAL.ss = append(yyDollar[1].ss, yyDollar[3].s)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2184
		{
			yyVAL.s = yyDollar[1].s
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2189
		{
			yyVAL.s = "select"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2194
		{
			yyVAL.s = "insert"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2199
		{
			yyVAL.s = "update"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2204
		{
			yyVAL.s = "delete"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2211
		{
			yyVAL.keyspaceRefs = []*algebra.KeyspaceRef{yyDollar[1].keyspaceRef}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2216
		{
			yyVAL.keyspaceRefs = append(yyDollar[1].keyspaceRefs, yyDollar[3].keyspaceRef)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2223
		{
			yyVAL.ss = []string{yyDollar[1].s}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2228
		{
			yyVAL.ss = append(yyDollar[1].ss, yyDollar[3].s)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2235
		{
			yyVAL.s = yyDollar[1].s
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2240
		{
			yyVAL.s = yyDollar[1].s + ":" + yyDollar[3].s
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2252
		{
			yyVAL.statement = algebra.NewRevokeRole(yyDollar[2].ss, nil, yyDollar[4].ss)
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2257
		{
			yyVAL.statement = algebra.NewRevokeRole(yyDollar[2].ss, yyDollar[4].keyspaceRefs, yyDollar[6].ss)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2270
		{
			yyVAL.statement = algebra.NewCreateScope(yyDollar[3].scopeRef)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2283
		{
			yyVAL.statement = algebra.NewDropScope(yyDollar[3].scopeRef)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2296
		{
			yyVAL.statement = algebra.NewCreateCollection(yyDollar[3].keyspaceRef)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2309
		{
			yyVAL.statement = algebra.NewDropCollection(yyDollar[3].keyspaceRef)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2322
		{
			yyVAL.statement = algebra.NewFlushCollection(yyDollar[3].keyspaceRef)
		}
	case 311:
		yyDollar = yyS[yypt-9 : yypt+1]
//line n1ql.y:2341
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyDollar[4].s, yyDollar[6].keyspaceRef, yyDollar[7].partitionTerm, yyDollar[8].indexType, yyDollar[9].val)
		}
	case 312:
		yyDollar = yyS[yypt-12 : yypt+1]
//line n1ql.y:2346
		{
			yyVAL.statement = algebra.NewCreateIndex(yyDollar[3].s, yyDollar[5].keyspaceRef, yyDollar[7].indexKeyTerms, yyDollar[9].partitionTerm, yyDollar[10].expr, yyDollar[11].indexType, yyDollar[12].val)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2353
		{
			yyVAL.s = "#primary"
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2365
		{
			yyVAL.s = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2374
		{
			path := algebra.NewPathShort(yyDollar[1].s, yyDollar[2].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, "")
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2380
		{
			path := algebra.NewPathLong(yylex.(*lexer).Namespace(), yyDollar[1].s, yyDollar[3].s, yyDollar[5].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, "")
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2388
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefWithContext(yyDollar[1].s, "", yylex.(*lexer).Namespace(), yylex.(*lexer).QueryContext())
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2393
		{
			path := algebra.NewPathLong(yyDollar[1].s, yyDollar[2].s, yyDollar[4].s, yyDollar[6].s)
			yyVAL.keyspaceRef = algebra.NewKeyspaceRefFromPath(path, "")
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2401
		{
			path := algebra.NewPathScope(yyDollar[1].s, yyDollar[2].s, yyDollar[4].s)
			yyVAL.scopeRef = algebra.NewScopeRefFromPath(path, "")
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2407
		{
			path := algebra.NewPathScope(yylex.(*lexer).Namespace(), yyDollar[1].s, yyDollar[3].s)
			yyVAL.scopeRef = algebra.NewScopeRefFromPath(path, "")
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2415
		{
			yyVAL.partitionTerm = nil
		}
	case 326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2420
		{
			yyVAL.partitionTerm = algebra.NewIndexPartitionTerm(datastore.HASH_PARTITION, yyDollar[5].exprs)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2427
		{
			yyVAL.indexType = datastore.DEFAULT
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2436
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2441
		{
			yyVAL.indexType = datastore.GSI
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2446
		{
			yyVAL.indexType = datastore.FTS
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2453
		{
			yyVAL.val = nil
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2462
		{
			yyVAL.val = yyDollar[2].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2472
		{
			yyVAL.indexKeyTerms = algebra.IndexKeyTerms{yyDollar[1].indexKeyTerm}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2477
		{
			yyVAL.indexKeyTerms = append(yyDollar[1].indexKeyTerms, yyDollar[3].indexKeyTerm)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2484
		{
			yyVAL.indexKeyTerm = algebra.NewIndexKeyTerm(yyDollar[1].expr, yyDollar[2].u32)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2492
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, false)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2497
		{
			yyVAL.expr = expression.NewAll(yyDollar[3].expr, true)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2502
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, true)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2509
		{
			exp := yyDollar[1].expr
			if exp != nil && (!exp.Indexable() || exp.Value() != nil) {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2526
		{
			yyVAL.expr = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2531
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2538
		{
			yyVAL.u32 = algebra.IK_NONE
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2541
		{
			yyVAL.u32 = yyDollar[1].u32
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2544
		{
			attr, valid := algebra.NewIndexKeyTermAttributes(yyDollar[1].u32, yyDollar[2].u32)
			if !valid {
				yylex.Error("Duplicate or Invalid index key attribute")
			}
			yyVAL.u32 = attr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2556
		{
			yyVAL.u32 = algebra.IK_ASC
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2559
		{
			yyVAL.u32 = algebra.IK_DESC
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2562
		{
			yyVAL.u32 = algebra.IK_MISSING
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2574
		{
			yyVAL.statement = algebra.NewDropIndex(yyDollar[5].keyspaceRef, "#primary", yyDollar[6].indexType)
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2579
		{
			yyVAL.statement = algebra.NewDropIndex(yyDollar[3].keyspaceRef, yyDollar[5].s, yyDollar[6].indexType)
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2584
		{
			yyVAL.statement = algebra.NewDropIndex(yyDollar[5].keyspaceRef, yyDollar[3].s, yyDollar[6].indexType)
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:2597
		{
			yyVAL.statement = algebra.NewAlterIndex(yyDollar[3].keyspaceRef, yyDollar[5].s, yyDollar[6].indexType, yyDollar[7].val)
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:2602
		{
			yyVAL.statement = algebra.NewAlterIndex(yyDollar[5].keyspaceRef, yyDollar[3].s, yyDollar[6].indexType, yyDollar[7].val)
		}
	case 358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2615
		{
			yyVAL.statement = algebra.NewBuildIndexes(yyDollar[4].keyspaceRef, yyDollar[8].indexType, yyDollar[6].exprs...)
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:2628
		{
			if yyDollar[7].functionBody != nil {
				err := yyDollar[7].functionBody.SetVarNames(yyDollar[5].ss)
				if err != nil {
					yylex.Error(err.Error())
				}
			}
			yyVAL.statement = algebra.NewCreateFunction(yyDollar[3].functionName, yyDollar[7].functionBody)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2647
		{
			name, err := functions.Constructor([]string{yyDollar[1].s}, yylex.(*lexer).Namespace())
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.functionName = name
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2658
		{
			name, err := functions.Constructor([]string{yyDollar[1].s, yyDollar[2].s}, yylex.(*lexer).Namespace())
			if yyVAL.functionName != nil {
				yylex.Error(err.Error())
			}
			yyVAL.functionName = name
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:2680
		{
			yyVAL.ss = nil
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2689
		{
			yyVAL.ss = []string{yyDollar[1].s}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2694
		{
			yyVAL.ss = append(yyDollar[1].ss, string(yyDollar[3].s))
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2701
		{
			body, err := inline.NewInlineBody(yyDollar[2].expr)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2711
		{
			body, err := inline.NewInlineBody(yyDollar[4].expr)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 370:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2721
		{
			body, err := golang.NewGolangBody(yyDollar[5].s, yyDollar[7].s)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2731
		{
			body, err := javascript.NewJavascriptBody(yyDollar[5].s, yyDollar[7].s)
			if err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.functionBody = body
			}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2749
		{
			yyVAL.statement = algebra.NewDropFunction(yyDollar[3].functionName)
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2762
		{
			yyVAL.statement = algebra.NewExecuteFunction(yyDollar[3].functionName, yyDollar[5].exprs)
		}
	case 374:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:2775
		{
			yyVAL.statement = algebra.NewUpdateStatistics(yyDollar[4].keyspaceRef, yyDollar[6].exprs, yyDollar[8].val)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2788
		{
			yyVAL.exprs = expression.Expressions{yyDollar[1].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2793
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:2810
		{
			yyVAL.path = expression.NewIdentifier(yyDollar[1].s)
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2815
		{
			yyVAL.path = expression.NewField(yyDollar[1].path, expression.NewFieldName(yyDollar[3].s, false))
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2820
		{
			field := expression.NewField(yyDollar[1].path, expression.NewFieldName(yyDollar[3].s, true))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2827
		{
			yyVAL.path = expression.NewField(yyDollar[1].path, yyDollar[4].expr)
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2832
		{
			field := expression.NewField(yyDollar[1].path, yyDollar[4].expr)
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2839
		{
			yyVAL.path = expression.NewElement(yyDollar[1].path, yyDollar[3].expr)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2856
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, false))
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2861
		{
			field := expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, true))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2868
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2873
		{
			field := expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2880
		{
			yyVAL.expr = expression.NewElement(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2885
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2890
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2895
		{
			yyVAL.expr = expression.NewArrayStar(yyDollar[1].expr)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2901
		{
			yyVAL.expr = expression.NewAdd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2906
		{
			yyVAL.expr = expression.NewSub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2911
		{
			yyVAL.expr = expression.NewMult(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2916
		{
			yyVAL.expr = expression.NewDiv(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2921
		{
			yyVAL.expr = expression.NewMod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2927
		{
			yyVAL.expr = expression.NewConcat(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2933
		{
			yyVAL.expr = expression.NewAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2938
		{
			yyVAL.expr = expression.NewOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:2943
		{
			yyVAL.expr = expression.NewNot(yyDollar[2].expr)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2949
		{
			yyVAL.expr = expression.NewEq(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2954
		{
			yyVAL.expr = expression.NewEq(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2959
		{
			yyVAL.expr = expression.NewNE(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2964
		{
			yyVAL.expr = expression.NewLT(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2969
		{
			yyVAL.expr = expression.NewGT(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2974
		{
			yyVAL.expr = expression.NewLE(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2979
		{
			yyVAL.expr = expression.NewGE(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:2984
		{
			yyVAL.expr = expression.NewBetween(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:2989
		{
			yyVAL.expr = expression.NewNotBetween(yyDollar[1].expr, yyDollar[4].expr, yyDollar[6].expr)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:2994
		{
			yyVAL.expr = expression.NewLike(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:2999
		{
			yyVAL.expr = expression.NewNotLike(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3004
		{
			yyVAL.expr = expression.NewIn(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3009
		{
			yyVAL.expr = expression.NewNotIn(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3014
		{
			yyVAL.expr = expression.NewWithin(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3019
		{
			yyVAL.expr = expression.NewNotWithin(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3024
		{
			yyVAL.expr = expression.NewIsNull(yyDollar[1].expr)
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3029
		{
			yyVAL.expr = expression.NewIsNotNull(yyDollar[1].expr)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3034
		{
			yyVAL.expr = expression.NewIsMissing(yyDollar[1].expr)
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3039
		{
			yyVAL.expr = expression.NewIsNotMissing(yyDollar[1].expr)
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3044
		{
			yyVAL.expr = expression.NewIsValued(yyDollar[1].expr)
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3049
		{
			yyVAL.expr = expression.NewIsNotValued(yyDollar[1].expr)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3054
		{
			yyVAL.expr = expression.NewExists(yyDollar[2].expr)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3074
		{
			yyVAL.expr = expression.NewIdentifier(yyDollar[1].s)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3080
		{
			ident := expression.NewIdentifier(yyDollar[1].s)
			ident.SetCaseInsensitive(true)
			yyVAL.expr = ident
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3088
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3100
		{
			yyVAL.expr = expression.NewNeg(yyDollar[2].expr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3115
		{
			if yylex.(*lexer).parsingStatement() {
				yylex.Error("syntax error")
			}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3121
		{
			yyVAL.expr = expression.NewCover(yyDollar[4].expr)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3131
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, false))
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3136
		{
			field := expression.NewField(yyDollar[1].expr, expression.NewFieldName(yyDollar[3].s, true))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3143
		{
			yyVAL.expr = expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3148
		{
			field := expression.NewField(yyDollar[1].expr, yyDollar[4].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3155
		{
			yyVAL.expr = expression.NewElement(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3160
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3165
		{
			yyVAL.expr = expression.NewSlice(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3170
		{
			yyVAL.expr = expression.NewArrayStar(yyDollar[1].expr)
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3176
		{
			yyVAL.expr = expression.NewAdd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3181
		{
			yyVAL.expr = expression.NewSub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3186
		{
			yyVAL.expr = expression.NewMult(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3191
		{
			yyVAL.expr = expression.NewDiv(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3196
		{
			yyVAL.expr = expression.NewMod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3202
		{
			yyVAL.expr = expression.NewConcat(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3216
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3221
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3226
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3231
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3236
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyDollar[1].f))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3241
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyDollar[1].n))
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3246
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyDollar[1].s))
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3266
		{
			yyVAL.expr = expression.NewObjectConstruct(algebra.MapPairs(yyDollar[2].pairs))
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3273
		{
			yyVAL.pairs = nil
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3282
		{
			yyVAL.pairs = algebra.Pairs{yyDollar[1].pair}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3287
		{
			yyVAL.pairs = append(yyDollar[1].pairs, yyDollar[3].pair)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3294
		{
			yyVAL.pair = algebra.NewPair(yyDollar[1].expr, yyDollar[3].expr, nil)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3299
		{
			name := yyDollar[1].expr.Alias()
			if name == "" {
				yylex.Error(fmt.Sprintf("Object member missing name or value: %s", yyDollar[1].expr.String()))
			}

			yyVAL.pair = algebra.NewPair(expression.NewConstant(name), yyDollar[1].expr, nil)
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3311
		{
			yyVAL.expr = expression.NewArrayConstruct(yyDollar[2].exprs...)
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3318
		{
			yyVAL.exprs = nil
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3327
		{
			yyVAL.exprs = expression.Expressions{yyDollar[1].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3332
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3345
		{
			yyVAL.expr = algebra.NewNamedParameter(yyDollar[1].s)
			yylex.(*lexer).countParam()
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3351
		{
			p := int(yyDollar[1].n)
			if yyDollar[1].n > int64(p) {
				yylex.Error(fmt.Sprintf("Positional parameter out of range: $%v.", yyDollar[1].n))
			}

			yyVAL.expr = algebra.NewPositionalParameter(p)
			yylex.(*lexer).countParam()
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3362
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3377
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3390
		{
			yyVAL.expr = expression.NewSimpleCase(yyDollar[1].expr, yyDollar[2].whenTerms, yyDollar[3].expr)
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3397
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyDollar[2].expr, yyDollar[4].expr}}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3402
		{
			yyVAL.whenTerms = append(yyDollar[1].whenTerms, &expression.WhenTerm{yyDollar[3].expr, yyDollar[5].expr})
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3410
		{
			yyVAL.expr = expression.NewSearchedCase(yyDollar[1].whenTerms, yyDollar[2].expr)
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3417
		{
			yyVAL.expr = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3422
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 489:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:3439
		{
			yyVAL.expr = nil
			fname := "nth_value"
			f, ok := algebra.GetAggregate(fname, false, false, (yyDollar[7].windowTerm != nil))
			if ok {
				if len(yyDollar[3].exprs) < f.MinArgs() || len(yyDollar[3].exprs) > f.MaxArgs() {
					if f.MinArgs() == f.MaxArgs() {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be %d.", fname, f.MaxArgs()))
					} else {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be between %d and %d.", fname, f.MinArgs(), f.MaxArgs()))
					}
				} else {
					yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
					if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
						a.SetAggregateModifiers(yyDollar[5].u32|yyDollar[6].u32, nil, yyDollar[7].windowTerm)
					}
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", fname))
			}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:3462
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyDollar[1].s)
			if !ok {
				f, ok = search.GetSearchFunction(yyDollar[1].s)
			}
			if !ok || yyDollar[7].windowTerm != nil {
				f, ok = algebra.GetAggregate(yyDollar[1].s, false, (yyDollar[5].expr != nil), (yyDollar[7].windowTerm != nil))
			}

			if ok {
				if (yyDollar[6].u32 == algebra.AGGREGATE_RESPECTNULLS && !algebra.AggregateHasProperty(yyDollar[1].s, algebra.AGGREGATE_WINDOW_RESPECTNULLS)) ||
					(yyDollar[6].u32 == algebra.AGGREGATE_IGNORENULLS && !algebra.AggregateHasProperty(yyDollar[1].s, algebra.AGGREGATE_WINDOW_IGNORENULLS)) {
					yylex.Error(fmt.Sprintf("RESPECT|IGNORE NULLS syntax is not valid for function %s.", yyDollar[1].s))
				} else if yyDollar[5].expr != nil && !algebra.AggregateHasProperty(yyDollar[1].s, algebra.AGGREGATE_ALLOWS_FILTER) {
					yylex.Error(fmt.Sprintf("FILTER caluse syntax is not valid for function %s.", yyDollar[1].s))
				} else if len(yyDollar[3].exprs) < f.MinArgs() || len(yyDollar[3].exprs) > f.MaxArgs() {
					if f.MinArgs() == f.MaxArgs() {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be %d.", yyDollar[1].s, f.MaxArgs()))
					} else {
						yylex.Error(fmt.Sprintf("Number of arguments to function %s must be between %d and %d.", yyDollar[1].s, f.MinArgs(), f.MaxArgs()))
					}
				} else {
					yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
					if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
						a.SetAggregateModifiers(yyDollar[6].u32, yyDollar[5].expr, yyDollar[7].windowTerm)
					}
				}
			} else {
				f = nil
				if yyDollar[5].expr == nil && yyDollar[6].u32 == uint32(0) && yyDollar[7].windowTerm == nil {
					name, err := functions.Constructor([]string{yyDollar[1].s}, yylex.(*lexer).Namespace())
					if err != nil {
						yylex.Error(err.Error())
						yylex.(*lexer).Stop()
					}
					f = expression.GetUserDefinedFunction(name)
				}

				if f != nil {
					yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
				} else {
					yylex.Error(fmt.Sprintf("Invalid function %s.", yyDollar[1].s))
					yylex.(*lexer).Stop()
				}
			}
		}
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
//line n1ql.y:3511
		{
			agg, ok := algebra.GetAggregate(yyDollar[1].s, yyDollar[3].u32 == algebra.AGGREGATE_DISTINCT, (yyDollar[6].expr != nil), (yyDollar[7].windowTerm != nil))
			if ok {
				yyVAL.expr = agg.Constructor()(yyDollar[4].expr)
				if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
					a.SetAggregateModifiers(yyDollar[3].u32, yyDollar[6].expr, yyDollar[7].windowTerm)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyDollar[1].s))
			}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3524
		{
			if strings.ToLower(yyDollar[1].s) != "count" {
				yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyDollar[1].s))
			} else {
				agg, ok := algebra.GetAggregate(yyDollar[1].s, false, (yyDollar[5].expr != nil), (yyDollar[6].windowTerm != nil))
				if ok {
					yyVAL.expr = agg.Constructor()(nil)
					if a, ok := yyVAL.expr.(algebra.Aggregate); ok {
						a.SetAggregateModifiers(uint32(0), yyDollar[5].expr, yyDollar[6].windowTerm)
					}
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyDollar[1].s))
				}
			}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3541
		{
			f := expression.GetUserDefinedFunction(yyDollar[1].functionName)
			if f != nil {
				yyVAL.expr = f.Constructor()(yyDollar[3].exprs...)
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %v", yyDollar[1].functionName))
				yylex.(*lexer).Stop()
			}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3570
		{
			yyVAL.expr = expression.NewAny(yyDollar[2].bindings, yyDollar[3].expr)
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3575
		{
			yyVAL.expr = expression.NewAny(yyDollar[2].bindings, yyDollar[3].expr)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3580
		{
			yyVAL.expr = expression.NewEvery(yyDollar[2].bindings, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3585
		{
			yyVAL.expr = expression.NewAnyEvery(yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3590
		{
			yyVAL.expr = expression.NewAnyEvery(yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3597
		{
			yyVAL.bindings = expression.Bindings{yyDollar[1].binding}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3602
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].binding)
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3609
		{
			yyVAL.binding = expression.NewSimpleBinding(yyDollar[1].s, yyDollar[3].expr)
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3614
		{
			yyVAL.binding = expression.NewBinding("", yyDollar[1].s, yyDollar[3].expr, true)
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3619
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, false)
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3624
		{
			yyVAL.binding = expression.NewBinding(yyDollar[1].s, yyDollar[3].s, yyDollar[5].expr, true)
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3631
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3638
		{
			yyVAL.expr = expression.NewArray(yyDollar[2].expr, yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3643
		{
			yyVAL.expr = expression.NewFirst(yyDollar[2].expr, yyDollar[4].bindings, yyDollar[5].expr)
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line n1ql.y:3648
		{
			yyVAL.expr = expression.NewObject(yyDollar[2].expr, yyDollar[4].expr, yyDollar[6].bindings, yyDollar[7].expr)
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3662
		{
			switch other := yyDollar[2].expr.(type) {
			case *expression.Identifier:
				other.SetParenthesis(true)
				yyVAL.expr = other
			default:
				yyVAL.expr = other
			}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3673
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3678
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3685
		{
			if yylex.(*lexer).parsingStatement() {
				yylex.Error("syntax error")
			}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line n1ql.y:3691
		{
			yyVAL.subquery = algebra.NewSubquery(yyDollar[4].fullselect)
			yyVAL.subquery.Select().SetCorrelated()
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3697
		{
			yyVAL.subquery = algebra.NewSubquery(yyDollar[2].fullselect)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3716
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, false)
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3721
		{
			yyVAL.expr = expression.NewAll(yyDollar[3].expr, true)
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3726
		{
			yyVAL.expr = expression.NewAll(yyDollar[2].expr, true)
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3739
		{
			yyVAL.windowTerms = nil
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3742
		{
			yyVAL.windowTerms = yyDollar[2].windowTerms
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3749
		{
			yyVAL.windowTerms = algebra.WindowTerms{yyDollar[1].windowTerm}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3754
		{
			yyVAL.windowTerms = append(yyDollar[1].windowTerms, yyDollar[3].windowTerm)
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3761
		{
			yyVAL.windowTerm = yyDollar[3].windowTerm
			yyVAL.windowTerm.SetAsWindowName(yyDollar[1].s)
		}
	case 528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line n1ql.y:3769
		{
			yyVAL.windowTerm = algebra.NewWindowTerm(yyDollar[2].s, yyDollar[3].exprs, yyDollar[4].order, yyDollar[5].windowFrame, false)
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3776
		{
			yyVAL.s = ""
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3783
		{
			yyVAL.exprs = nil
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3786
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3791
		{
			yyVAL.windowFrame = nil
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3796
		{
			yyVAL.windowFrame = algebra.NewWindowFrame(yyDollar[1].u32|yyDollar[3].u32, yyDollar[2].windowFrameExtents)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3803
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_ROWS
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3808
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_RANGE
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3813
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_GROUPS
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3820
		{
			yyVAL.u32 = uint32(0)
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3825
		{
			yyVAL.u32 = uint32(0)
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line n1ql.y:3830
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_EXCLUDE_CURRENT_ROW
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3835
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_EXCLUDE_TIES
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3840
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_EXCLUDE_GROUP
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3847
		{
			yyVAL.windowFrameExtents = algebra.WindowFrameExtents{yyDollar[1].windowFrameExtent}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3852
		{
			yyVAL.windowFrameExtents = algebra.WindowFrameExtents{yyDollar[2].windowFrameExtent, yyDollar[4].windowFrameExtent}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3859
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(nil, algebra.WINDOW_FRAME_UNBOUNDED_PRECEDING)
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3864
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(nil, algebra.WINDOW_FRAME_UNBOUNDED_FOLLOWING)
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3869
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(nil, algebra.WINDOW_FRAME_CURRENT_ROW)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3874
		{
			yyVAL.windowFrameExtent = algebra.NewWindowFrameExtent(yyDollar[1].expr, yyDollar[2].u32)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3881
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_VALUE_PRECEDING
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3886
		{
			yyVAL.u32 = algebra.WINDOW_FRAME_VALUE_FOLLOWING
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3893
		{
			yyVAL.u32 = uint32(0)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3896
		{
			yyVAL.u32 = yyDollar[1].u32
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3901
		{
			yyVAL.u32 = algebra.AGGREGATE_RESPECTNULLS
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3904
		{
			yyVAL.u32 = algebra.AGGREGATE_IGNORENULLS
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3909
		{
			yyVAL.u32 = uint32(0)
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3912
		{
			if yyDollar[2].b {
				yyVAL.u32 = algebra.AGGREGATE_FROMLAST
			} else {
				yyVAL.u32 = algebra.AGGREGATE_FROMFIRST
			}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3923
		{
			yyVAL.u32 = uint32(0)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3928
		{
			yyVAL.u32 = algebra.AGGREGATE_DISTINCT
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3935
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line n1ql.y:3938
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line n1ql.y:3943
		{
			yyVAL.windowTerm = nil
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line n1ql.y:3946
		{
			yyVAL.windowTerm = yyDollar[1].windowTerm
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3951
		{
			yyVAL.windowTerm = algebra.NewWindowTerm(yyDollar[2].s, nil, nil, nil, true)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line n1ql.y:3956
		{
			yyVAL.windowTerm = yyDollar[2].windowTerm
		}
	}
	goto yystack /* stack new state and value */
}
